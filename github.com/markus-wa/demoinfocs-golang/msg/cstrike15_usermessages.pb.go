// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cstrike15_usermessages.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ECstrike15UserMessages int32

const (
	ECstrike15UserMessages_CS_UM_VGUIMenu                     ECstrike15UserMessages = 1
	ECstrike15UserMessages_CS_UM_Geiger                       ECstrike15UserMessages = 2
	ECstrike15UserMessages_CS_UM_Train                        ECstrike15UserMessages = 3
	ECstrike15UserMessages_CS_UM_HudText                      ECstrike15UserMessages = 4
	ECstrike15UserMessages_CS_UM_SayText                      ECstrike15UserMessages = 5
	ECstrike15UserMessages_CS_UM_SayText2                     ECstrike15UserMessages = 6
	ECstrike15UserMessages_CS_UM_TextMsg                      ECstrike15UserMessages = 7
	ECstrike15UserMessages_CS_UM_HudMsg                       ECstrike15UserMessages = 8
	ECstrike15UserMessages_CS_UM_ResetHud                     ECstrike15UserMessages = 9
	ECstrike15UserMessages_CS_UM_GameTitle                    ECstrike15UserMessages = 10
	ECstrike15UserMessages_CS_UM_Shake                        ECstrike15UserMessages = 12
	ECstrike15UserMessages_CS_UM_Fade                         ECstrike15UserMessages = 13
	ECstrike15UserMessages_CS_UM_Rumble                       ECstrike15UserMessages = 14
	ECstrike15UserMessages_CS_UM_CloseCaption                 ECstrike15UserMessages = 15
	ECstrike15UserMessages_CS_UM_CloseCaptionDirect           ECstrike15UserMessages = 16
	ECstrike15UserMessages_CS_UM_SendAudio                    ECstrike15UserMessages = 17
	ECstrike15UserMessages_CS_UM_RawAudio                     ECstrike15UserMessages = 18
	ECstrike15UserMessages_CS_UM_VoiceMask                    ECstrike15UserMessages = 19
	ECstrike15UserMessages_CS_UM_RequestState                 ECstrike15UserMessages = 20
	ECstrike15UserMessages_CS_UM_Damage                       ECstrike15UserMessages = 21
	ECstrike15UserMessages_CS_UM_RadioText                    ECstrike15UserMessages = 22
	ECstrike15UserMessages_CS_UM_HintText                     ECstrike15UserMessages = 23
	ECstrike15UserMessages_CS_UM_KeyHintText                  ECstrike15UserMessages = 24
	ECstrike15UserMessages_CS_UM_ProcessSpottedEntityUpdate   ECstrike15UserMessages = 25
	ECstrike15UserMessages_CS_UM_ReloadEffect                 ECstrike15UserMessages = 26
	ECstrike15UserMessages_CS_UM_AdjustMoney                  ECstrike15UserMessages = 27
	ECstrike15UserMessages_CS_UM_UpdateTeamMoney              ECstrike15UserMessages = 28
	ECstrike15UserMessages_CS_UM_StopSpectatorMode            ECstrike15UserMessages = 29
	ECstrike15UserMessages_CS_UM_KillCam                      ECstrike15UserMessages = 30
	ECstrike15UserMessages_CS_UM_DesiredTimescale             ECstrike15UserMessages = 31
	ECstrike15UserMessages_CS_UM_CurrentTimescale             ECstrike15UserMessages = 32
	ECstrike15UserMessages_CS_UM_AchievementEvent             ECstrike15UserMessages = 33
	ECstrike15UserMessages_CS_UM_MatchEndConditions           ECstrike15UserMessages = 34
	ECstrike15UserMessages_CS_UM_DisconnectToLobby            ECstrike15UserMessages = 35
	ECstrike15UserMessages_CS_UM_PlayerStatsUpdate            ECstrike15UserMessages = 36
	ECstrike15UserMessages_CS_UM_DisplayInventory             ECstrike15UserMessages = 37
	ECstrike15UserMessages_CS_UM_WarmupHasEnded               ECstrike15UserMessages = 38
	ECstrike15UserMessages_CS_UM_ClientInfo                   ECstrike15UserMessages = 39
	ECstrike15UserMessages_CS_UM_XRankGet                     ECstrike15UserMessages = 40
	ECstrike15UserMessages_CS_UM_XRankUpd                     ECstrike15UserMessages = 41
	ECstrike15UserMessages_CS_UM_CallVoteFailed               ECstrike15UserMessages = 45
	ECstrike15UserMessages_CS_UM_VoteStart                    ECstrike15UserMessages = 46
	ECstrike15UserMessages_CS_UM_VotePass                     ECstrike15UserMessages = 47
	ECstrike15UserMessages_CS_UM_VoteFailed                   ECstrike15UserMessages = 48
	ECstrike15UserMessages_CS_UM_VoteSetup                    ECstrike15UserMessages = 49
	ECstrike15UserMessages_CS_UM_ServerRankRevealAll          ECstrike15UserMessages = 50
	ECstrike15UserMessages_CS_UM_SendLastKillerDamageToClient ECstrike15UserMessages = 51
	ECstrike15UserMessages_CS_UM_ServerRankUpdate             ECstrike15UserMessages = 52
	ECstrike15UserMessages_CS_UM_ItemPickup                   ECstrike15UserMessages = 53
	ECstrike15UserMessages_CS_UM_ShowMenu                     ECstrike15UserMessages = 54
	ECstrike15UserMessages_CS_UM_BarTime                      ECstrike15UserMessages = 55
	ECstrike15UserMessages_CS_UM_AmmoDenied                   ECstrike15UserMessages = 56
	ECstrike15UserMessages_CS_UM_MarkAchievement              ECstrike15UserMessages = 57
	ECstrike15UserMessages_CS_UM_MatchStatsUpdate             ECstrike15UserMessages = 58
	ECstrike15UserMessages_CS_UM_ItemDrop                     ECstrike15UserMessages = 59
	ECstrike15UserMessages_CS_UM_GlowPropTurnOff              ECstrike15UserMessages = 60
	ECstrike15UserMessages_CS_UM_SendPlayerItemDrops          ECstrike15UserMessages = 61
	ECstrike15UserMessages_CS_UM_RoundBackupFilenames         ECstrike15UserMessages = 62
	ECstrike15UserMessages_CS_UM_SendPlayerItemFound          ECstrike15UserMessages = 63
	ECstrike15UserMessages_CS_UM_ReportHit                    ECstrike15UserMessages = 64
	ECstrike15UserMessages_CS_UM_XpUpdate                     ECstrike15UserMessages = 65
	ECstrike15UserMessages_CS_UM_QuestProgress                ECstrike15UserMessages = 66
	ECstrike15UserMessages_CS_UM_ScoreLeaderboardData         ECstrike15UserMessages = 67
)

var ECstrike15UserMessages_name = map[int32]string{
	1:  "CS_UM_VGUIMenu",
	2:  "CS_UM_Geiger",
	3:  "CS_UM_Train",
	4:  "CS_UM_HudText",
	5:  "CS_UM_SayText",
	6:  "CS_UM_SayText2",
	7:  "CS_UM_TextMsg",
	8:  "CS_UM_HudMsg",
	9:  "CS_UM_ResetHud",
	10: "CS_UM_GameTitle",
	12: "CS_UM_Shake",
	13: "CS_UM_Fade",
	14: "CS_UM_Rumble",
	15: "CS_UM_CloseCaption",
	16: "CS_UM_CloseCaptionDirect",
	17: "CS_UM_SendAudio",
	18: "CS_UM_RawAudio",
	19: "CS_UM_VoiceMask",
	20: "CS_UM_RequestState",
	21: "CS_UM_Damage",
	22: "CS_UM_RadioText",
	23: "CS_UM_HintText",
	24: "CS_UM_KeyHintText",
	25: "CS_UM_ProcessSpottedEntityUpdate",
	26: "CS_UM_ReloadEffect",
	27: "CS_UM_AdjustMoney",
	28: "CS_UM_UpdateTeamMoney",
	29: "CS_UM_StopSpectatorMode",
	30: "CS_UM_KillCam",
	31: "CS_UM_DesiredTimescale",
	32: "CS_UM_CurrentTimescale",
	33: "CS_UM_AchievementEvent",
	34: "CS_UM_MatchEndConditions",
	35: "CS_UM_DisconnectToLobby",
	36: "CS_UM_PlayerStatsUpdate",
	37: "CS_UM_DisplayInventory",
	38: "CS_UM_WarmupHasEnded",
	39: "CS_UM_ClientInfo",
	40: "CS_UM_XRankGet",
	41: "CS_UM_XRankUpd",
	45: "CS_UM_CallVoteFailed",
	46: "CS_UM_VoteStart",
	47: "CS_UM_VotePass",
	48: "CS_UM_VoteFailed",
	49: "CS_UM_VoteSetup",
	50: "CS_UM_ServerRankRevealAll",
	51: "CS_UM_SendLastKillerDamageToClient",
	52: "CS_UM_ServerRankUpdate",
	53: "CS_UM_ItemPickup",
	54: "CS_UM_ShowMenu",
	55: "CS_UM_BarTime",
	56: "CS_UM_AmmoDenied",
	57: "CS_UM_MarkAchievement",
	58: "CS_UM_MatchStatsUpdate",
	59: "CS_UM_ItemDrop",
	60: "CS_UM_GlowPropTurnOff",
	61: "CS_UM_SendPlayerItemDrops",
	62: "CS_UM_RoundBackupFilenames",
	63: "CS_UM_SendPlayerItemFound",
	64: "CS_UM_ReportHit",
	65: "CS_UM_XpUpdate",
	66: "CS_UM_QuestProgress",
	67: "CS_UM_ScoreLeaderboardData",
}
var ECstrike15UserMessages_value = map[string]int32{
	"CS_UM_VGUIMenu":                     1,
	"CS_UM_Geiger":                       2,
	"CS_UM_Train":                        3,
	"CS_UM_HudText":                      4,
	"CS_UM_SayText":                      5,
	"CS_UM_SayText2":                     6,
	"CS_UM_TextMsg":                      7,
	"CS_UM_HudMsg":                       8,
	"CS_UM_ResetHud":                     9,
	"CS_UM_GameTitle":                    10,
	"CS_UM_Shake":                        12,
	"CS_UM_Fade":                         13,
	"CS_UM_Rumble":                       14,
	"CS_UM_CloseCaption":                 15,
	"CS_UM_CloseCaptionDirect":           16,
	"CS_UM_SendAudio":                    17,
	"CS_UM_RawAudio":                     18,
	"CS_UM_VoiceMask":                    19,
	"CS_UM_RequestState":                 20,
	"CS_UM_Damage":                       21,
	"CS_UM_RadioText":                    22,
	"CS_UM_HintText":                     23,
	"CS_UM_KeyHintText":                  24,
	"CS_UM_ProcessSpottedEntityUpdate":   25,
	"CS_UM_ReloadEffect":                 26,
	"CS_UM_AdjustMoney":                  27,
	"CS_UM_UpdateTeamMoney":              28,
	"CS_UM_StopSpectatorMode":            29,
	"CS_UM_KillCam":                      30,
	"CS_UM_DesiredTimescale":             31,
	"CS_UM_CurrentTimescale":             32,
	"CS_UM_AchievementEvent":             33,
	"CS_UM_MatchEndConditions":           34,
	"CS_UM_DisconnectToLobby":            35,
	"CS_UM_PlayerStatsUpdate":            36,
	"CS_UM_DisplayInventory":             37,
	"CS_UM_WarmupHasEnded":               38,
	"CS_UM_ClientInfo":                   39,
	"CS_UM_XRankGet":                     40,
	"CS_UM_XRankUpd":                     41,
	"CS_UM_CallVoteFailed":               45,
	"CS_UM_VoteStart":                    46,
	"CS_UM_VotePass":                     47,
	"CS_UM_VoteFailed":                   48,
	"CS_UM_VoteSetup":                    49,
	"CS_UM_ServerRankRevealAll":          50,
	"CS_UM_SendLastKillerDamageToClient": 51,
	"CS_UM_ServerRankUpdate":             52,
	"CS_UM_ItemPickup":                   53,
	"CS_UM_ShowMenu":                     54,
	"CS_UM_BarTime":                      55,
	"CS_UM_AmmoDenied":                   56,
	"CS_UM_MarkAchievement":              57,
	"CS_UM_MatchStatsUpdate":             58,
	"CS_UM_ItemDrop":                     59,
	"CS_UM_GlowPropTurnOff":              60,
	"CS_UM_SendPlayerItemDrops":          61,
	"CS_UM_RoundBackupFilenames":         62,
	"CS_UM_SendPlayerItemFound":          63,
	"CS_UM_ReportHit":                    64,
	"CS_UM_XpUpdate":                     65,
	"CS_UM_QuestProgress":                66,
	"CS_UM_ScoreLeaderboardData":         67,
}

func (x ECstrike15UserMessages) Enum() *ECstrike15UserMessages {
	p := new(ECstrike15UserMessages)
	*p = x
	return p
}
func (x ECstrike15UserMessages) String() string {
	return proto.EnumName(ECstrike15UserMessages_name, int32(x))
}
func (x *ECstrike15UserMessages) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ECstrike15UserMessages_value, data, "ECstrike15UserMessages")
	if err != nil {
		return err
	}
	*x = ECstrike15UserMessages(value)
	return nil
}
func (ECstrike15UserMessages) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{0}
}

type CCSUsrMsg_VGUIMenu struct {
	Name    string                       `protobuf:"bytes,1,opt,name=name" json:"name"`
	Show    bool                         `protobuf:"varint,2,opt,name=show" json:"show"`
	Subkeys []*CCSUsrMsg_VGUIMenu_Subkey `protobuf:"bytes,3,rep,name=subkeys" json:"subkeys,omitempty"`
}

func (m *CCSUsrMsg_VGUIMenu) Reset()         { *m = CCSUsrMsg_VGUIMenu{} }
func (m *CCSUsrMsg_VGUIMenu) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VGUIMenu) ProtoMessage()    {}
func (*CCSUsrMsg_VGUIMenu) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{0}
}

func (m *CCSUsrMsg_VGUIMenu) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CCSUsrMsg_VGUIMenu) GetShow() bool {
	if m != nil {
		return m.Show
	}
	return false
}

func (m *CCSUsrMsg_VGUIMenu) GetSubkeys() []*CCSUsrMsg_VGUIMenu_Subkey {
	if m != nil {
		return m.Subkeys
	}
	return nil
}

type CCSUsrMsg_VGUIMenu_Subkey struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Str  string `protobuf:"bytes,2,opt,name=str" json:"str"`
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) Reset()         { *m = CCSUsrMsg_VGUIMenu_Subkey{} }
func (m *CCSUsrMsg_VGUIMenu_Subkey) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VGUIMenu_Subkey) ProtoMessage()    {}
func (*CCSUsrMsg_VGUIMenu_Subkey) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{0, 0}
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type CCSUsrMsg_Geiger struct {
	Range int32 `protobuf:"varint,1,opt,name=range" json:"range"`
}

func (m *CCSUsrMsg_Geiger) Reset()         { *m = CCSUsrMsg_Geiger{} }
func (m *CCSUsrMsg_Geiger) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Geiger) ProtoMessage()    {}
func (*CCSUsrMsg_Geiger) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{1}
}

func (m *CCSUsrMsg_Geiger) GetRange() int32 {
	if m != nil {
		return m.Range
	}
	return 0
}

type CCSUsrMsg_Train struct {
	Train int32 `protobuf:"varint,1,opt,name=train" json:"train"`
}

func (m *CCSUsrMsg_Train) Reset()         { *m = CCSUsrMsg_Train{} }
func (m *CCSUsrMsg_Train) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Train) ProtoMessage()    {}
func (*CCSUsrMsg_Train) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{2}
}

func (m *CCSUsrMsg_Train) GetTrain() int32 {
	if m != nil {
		return m.Train
	}
	return 0
}

type CCSUsrMsg_HudText struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text"`
}

func (m *CCSUsrMsg_HudText) Reset()         { *m = CCSUsrMsg_HudText{} }
func (m *CCSUsrMsg_HudText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_HudText) ProtoMessage()    {}
func (*CCSUsrMsg_HudText) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{3}
}

func (m *CCSUsrMsg_HudText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CCSUsrMsg_SayText struct {
	EntIdx      int32  `protobuf:"varint,1,opt,name=ent_idx,json=entIdx" json:"ent_idx"`
	Text        string `protobuf:"bytes,2,opt,name=text" json:"text"`
	Chat        bool   `protobuf:"varint,3,opt,name=chat" json:"chat"`
	Textallchat bool   `protobuf:"varint,4,opt,name=textallchat" json:"textallchat"`
}

func (m *CCSUsrMsg_SayText) Reset()         { *m = CCSUsrMsg_SayText{} }
func (m *CCSUsrMsg_SayText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SayText) ProtoMessage()    {}
func (*CCSUsrMsg_SayText) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{4}
}

func (m *CCSUsrMsg_SayText) GetEntIdx() int32 {
	if m != nil {
		return m.EntIdx
	}
	return 0
}

func (m *CCSUsrMsg_SayText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CCSUsrMsg_SayText) GetChat() bool {
	if m != nil {
		return m.Chat
	}
	return false
}

func (m *CCSUsrMsg_SayText) GetTextallchat() bool {
	if m != nil {
		return m.Textallchat
	}
	return false
}

type CCSUsrMsg_SayText2 struct {
	EntIdx      int32    `protobuf:"varint,1,opt,name=ent_idx,json=entIdx" json:"ent_idx"`
	Chat        bool     `protobuf:"varint,2,opt,name=chat" json:"chat"`
	MsgName     string   `protobuf:"bytes,3,opt,name=msg_name,json=msgName" json:"msg_name"`
	Params      []string `protobuf:"bytes,4,rep,name=params" json:"params,omitempty"`
	Textallchat bool     `protobuf:"varint,5,opt,name=textallchat" json:"textallchat"`
}

func (m *CCSUsrMsg_SayText2) Reset()         { *m = CCSUsrMsg_SayText2{} }
func (m *CCSUsrMsg_SayText2) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SayText2) ProtoMessage()    {}
func (*CCSUsrMsg_SayText2) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{5}
}

func (m *CCSUsrMsg_SayText2) GetEntIdx() int32 {
	if m != nil {
		return m.EntIdx
	}
	return 0
}

func (m *CCSUsrMsg_SayText2) GetChat() bool {
	if m != nil {
		return m.Chat
	}
	return false
}

func (m *CCSUsrMsg_SayText2) GetMsgName() string {
	if m != nil {
		return m.MsgName
	}
	return ""
}

func (m *CCSUsrMsg_SayText2) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *CCSUsrMsg_SayText2) GetTextallchat() bool {
	if m != nil {
		return m.Textallchat
	}
	return false
}

type CCSUsrMsg_TextMsg struct {
	MsgDst int32    `protobuf:"varint,1,opt,name=msg_dst,json=msgDst" json:"msg_dst"`
	Params []string `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
}

func (m *CCSUsrMsg_TextMsg) Reset()         { *m = CCSUsrMsg_TextMsg{} }
func (m *CCSUsrMsg_TextMsg) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_TextMsg) ProtoMessage()    {}
func (*CCSUsrMsg_TextMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{6}
}

func (m *CCSUsrMsg_TextMsg) GetMsgDst() int32 {
	if m != nil {
		return m.MsgDst
	}
	return 0
}

func (m *CCSUsrMsg_TextMsg) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type CCSUsrMsg_HudMsg struct {
	Channel     int32         `protobuf:"varint,1,opt,name=channel" json:"channel"`
	Pos         *CMsgVector2D `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Clr1        *CMsgRGBA     `protobuf:"bytes,3,opt,name=clr1" json:"clr1,omitempty"`
	Clr2        *CMsgRGBA     `protobuf:"bytes,4,opt,name=clr2" json:"clr2,omitempty"`
	Effect      int32         `protobuf:"varint,5,opt,name=effect" json:"effect"`
	FadeInTime  float32       `protobuf:"fixed32,6,opt,name=fade_in_time,json=fadeInTime" json:"fade_in_time"`
	FadeOutTime float32       `protobuf:"fixed32,7,opt,name=fade_out_time,json=fadeOutTime" json:"fade_out_time"`
	HoldTime    float32       `protobuf:"fixed32,9,opt,name=hold_time,json=holdTime" json:"hold_time"`
	FxTime      float32       `protobuf:"fixed32,10,opt,name=fx_time,json=fxTime" json:"fx_time"`
	Text        string        `protobuf:"bytes,11,opt,name=text" json:"text"`
}

func (m *CCSUsrMsg_HudMsg) Reset()         { *m = CCSUsrMsg_HudMsg{} }
func (m *CCSUsrMsg_HudMsg) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_HudMsg) ProtoMessage()    {}
func (*CCSUsrMsg_HudMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{7}
}

func (m *CCSUsrMsg_HudMsg) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetPos() *CMsgVector2D {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CCSUsrMsg_HudMsg) GetClr1() *CMsgRGBA {
	if m != nil {
		return m.Clr1
	}
	return nil
}

func (m *CCSUsrMsg_HudMsg) GetClr2() *CMsgRGBA {
	if m != nil {
		return m.Clr2
	}
	return nil
}

func (m *CCSUsrMsg_HudMsg) GetEffect() int32 {
	if m != nil {
		return m.Effect
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetFadeInTime() float32 {
	if m != nil {
		return m.FadeInTime
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetFadeOutTime() float32 {
	if m != nil {
		return m.FadeOutTime
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetHoldTime() float32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetFxTime() float32 {
	if m != nil {
		return m.FxTime
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CCSUsrMsg_Shake struct {
	Command        int32   `protobuf:"varint,1,opt,name=command" json:"command"`
	LocalAmplitude float32 `protobuf:"fixed32,2,opt,name=local_amplitude,json=localAmplitude" json:"local_amplitude"`
	Frequency      float32 `protobuf:"fixed32,3,opt,name=frequency" json:"frequency"`
	Duration       float32 `protobuf:"fixed32,4,opt,name=duration" json:"duration"`
}

func (m *CCSUsrMsg_Shake) Reset()         { *m = CCSUsrMsg_Shake{} }
func (m *CCSUsrMsg_Shake) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Shake) ProtoMessage()    {}
func (*CCSUsrMsg_Shake) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{8}
}

func (m *CCSUsrMsg_Shake) GetCommand() int32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *CCSUsrMsg_Shake) GetLocalAmplitude() float32 {
	if m != nil {
		return m.LocalAmplitude
	}
	return 0
}

func (m *CCSUsrMsg_Shake) GetFrequency() float32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *CCSUsrMsg_Shake) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type CCSUsrMsg_Fade struct {
	Duration int32     `protobuf:"varint,1,opt,name=duration" json:"duration"`
	HoldTime int32     `protobuf:"varint,2,opt,name=hold_time,json=holdTime" json:"hold_time"`
	Flags    int32     `protobuf:"varint,3,opt,name=flags" json:"flags"`
	Clr      *CMsgRGBA `protobuf:"bytes,4,opt,name=clr" json:"clr,omitempty"`
}

func (m *CCSUsrMsg_Fade) Reset()         { *m = CCSUsrMsg_Fade{} }
func (m *CCSUsrMsg_Fade) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Fade) ProtoMessage()    {}
func (*CCSUsrMsg_Fade) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{9}
}

func (m *CCSUsrMsg_Fade) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CCSUsrMsg_Fade) GetHoldTime() int32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *CCSUsrMsg_Fade) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *CCSUsrMsg_Fade) GetClr() *CMsgRGBA {
	if m != nil {
		return m.Clr
	}
	return nil
}

type CCSUsrMsg_Rumble struct {
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index"`
	Data  int32 `protobuf:"varint,2,opt,name=data" json:"data"`
	Flags int32 `protobuf:"varint,3,opt,name=flags" json:"flags"`
}

func (m *CCSUsrMsg_Rumble) Reset()         { *m = CCSUsrMsg_Rumble{} }
func (m *CCSUsrMsg_Rumble) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Rumble) ProtoMessage()    {}
func (*CCSUsrMsg_Rumble) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{10}
}

func (m *CCSUsrMsg_Rumble) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CCSUsrMsg_Rumble) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

func (m *CCSUsrMsg_Rumble) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type CCSUsrMsg_CloseCaption struct {
	Hash       uint32 `protobuf:"varint,1,opt,name=hash" json:"hash"`
	Duration   int32  `protobuf:"varint,2,opt,name=duration" json:"duration"`
	FromPlayer bool   `protobuf:"varint,3,opt,name=from_player,json=fromPlayer" json:"from_player"`
}

func (m *CCSUsrMsg_CloseCaption) Reset()         { *m = CCSUsrMsg_CloseCaption{} }
func (m *CCSUsrMsg_CloseCaption) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CloseCaption) ProtoMessage()    {}
func (*CCSUsrMsg_CloseCaption) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{11}
}

func (m *CCSUsrMsg_CloseCaption) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *CCSUsrMsg_CloseCaption) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CCSUsrMsg_CloseCaption) GetFromPlayer() bool {
	if m != nil {
		return m.FromPlayer
	}
	return false
}

type CCSUsrMsg_CloseCaptionDirect struct {
	Hash       uint32 `protobuf:"varint,1,opt,name=hash" json:"hash"`
	Duration   int32  `protobuf:"varint,2,opt,name=duration" json:"duration"`
	FromPlayer bool   `protobuf:"varint,3,opt,name=from_player,json=fromPlayer" json:"from_player"`
}

func (m *CCSUsrMsg_CloseCaptionDirect) Reset()         { *m = CCSUsrMsg_CloseCaptionDirect{} }
func (m *CCSUsrMsg_CloseCaptionDirect) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CloseCaptionDirect) ProtoMessage()    {}
func (*CCSUsrMsg_CloseCaptionDirect) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{12}
}

func (m *CCSUsrMsg_CloseCaptionDirect) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *CCSUsrMsg_CloseCaptionDirect) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CCSUsrMsg_CloseCaptionDirect) GetFromPlayer() bool {
	if m != nil {
		return m.FromPlayer
	}
	return false
}

type CCSUsrMsg_SendAudio struct {
	RadioSound string `protobuf:"bytes,1,opt,name=radio_sound,json=radioSound" json:"radio_sound"`
}

func (m *CCSUsrMsg_SendAudio) Reset()         { *m = CCSUsrMsg_SendAudio{} }
func (m *CCSUsrMsg_SendAudio) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SendAudio) ProtoMessage()    {}
func (*CCSUsrMsg_SendAudio) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{13}
}

func (m *CCSUsrMsg_SendAudio) GetRadioSound() string {
	if m != nil {
		return m.RadioSound
	}
	return ""
}

type CCSUsrMsg_RawAudio struct {
	Pitch         int32   `protobuf:"varint,1,opt,name=pitch" json:"pitch"`
	Entidx        int32   `protobuf:"varint,2,opt,name=entidx" json:"entidx"`
	Duration      float32 `protobuf:"fixed32,3,opt,name=duration" json:"duration"`
	VoiceFilename string  `protobuf:"bytes,4,opt,name=voice_filename,json=voiceFilename" json:"voice_filename"`
}

func (m *CCSUsrMsg_RawAudio) Reset()         { *m = CCSUsrMsg_RawAudio{} }
func (m *CCSUsrMsg_RawAudio) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RawAudio) ProtoMessage()    {}
func (*CCSUsrMsg_RawAudio) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{14}
}

func (m *CCSUsrMsg_RawAudio) GetPitch() int32 {
	if m != nil {
		return m.Pitch
	}
	return 0
}

func (m *CCSUsrMsg_RawAudio) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

func (m *CCSUsrMsg_RawAudio) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CCSUsrMsg_RawAudio) GetVoiceFilename() string {
	if m != nil {
		return m.VoiceFilename
	}
	return ""
}

type CCSUsrMsg_VoiceMask struct {
	PlayerMasks     []*CCSUsrMsg_VoiceMask_PlayerMask `protobuf:"bytes,1,rep,name=player_masks,json=playerMasks" json:"player_masks,omitempty"`
	PlayerModEnable bool                              `protobuf:"varint,2,opt,name=player_mod_enable,json=playerModEnable" json:"player_mod_enable"`
}

func (m *CCSUsrMsg_VoiceMask) Reset()         { *m = CCSUsrMsg_VoiceMask{} }
func (m *CCSUsrMsg_VoiceMask) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoiceMask) ProtoMessage()    {}
func (*CCSUsrMsg_VoiceMask) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{15}
}

func (m *CCSUsrMsg_VoiceMask) GetPlayerMasks() []*CCSUsrMsg_VoiceMask_PlayerMask {
	if m != nil {
		return m.PlayerMasks
	}
	return nil
}

func (m *CCSUsrMsg_VoiceMask) GetPlayerModEnable() bool {
	if m != nil {
		return m.PlayerModEnable
	}
	return false
}

type CCSUsrMsg_VoiceMask_PlayerMask struct {
	GameRulesMask int32 `protobuf:"varint,1,opt,name=game_rules_mask,json=gameRulesMask" json:"game_rules_mask"`
	BanMasks      int32 `protobuf:"varint,2,opt,name=ban_masks,json=banMasks" json:"ban_masks"`
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) Reset()         { *m = CCSUsrMsg_VoiceMask_PlayerMask{} }
func (m *CCSUsrMsg_VoiceMask_PlayerMask) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoiceMask_PlayerMask) ProtoMessage()    {}
func (*CCSUsrMsg_VoiceMask_PlayerMask) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{15, 0}
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) GetGameRulesMask() int32 {
	if m != nil {
		return m.GameRulesMask
	}
	return 0
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) GetBanMasks() int32 {
	if m != nil {
		return m.BanMasks
	}
	return 0
}

type CCSUsrMsg_Damage struct {
	Amount            int32       `protobuf:"varint,1,opt,name=amount" json:"amount"`
	InflictorWorldPos *CMsgVector `protobuf:"bytes,2,opt,name=inflictor_world_pos,json=inflictorWorldPos" json:"inflictor_world_pos,omitempty"`
	VictimEntindex    int32       `protobuf:"varint,3,opt,name=victim_entindex,json=victimEntindex" json:"victim_entindex"`
}

func (m *CCSUsrMsg_Damage) Reset()         { *m = CCSUsrMsg_Damage{} }
func (m *CCSUsrMsg_Damage) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Damage) ProtoMessage()    {}
func (*CCSUsrMsg_Damage) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{16}
}

func (m *CCSUsrMsg_Damage) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CCSUsrMsg_Damage) GetInflictorWorldPos() *CMsgVector {
	if m != nil {
		return m.InflictorWorldPos
	}
	return nil
}

func (m *CCSUsrMsg_Damage) GetVictimEntindex() int32 {
	if m != nil {
		return m.VictimEntindex
	}
	return 0
}

type CCSUsrMsg_RadioText struct {
	MsgDst  int32    `protobuf:"varint,1,opt,name=msg_dst,json=msgDst" json:"msg_dst"`
	Client  int32    `protobuf:"varint,2,opt,name=client" json:"client"`
	MsgName string   `protobuf:"bytes,3,opt,name=msg_name,json=msgName" json:"msg_name"`
	Params  []string `protobuf:"bytes,4,rep,name=params" json:"params,omitempty"`
}

func (m *CCSUsrMsg_RadioText) Reset()         { *m = CCSUsrMsg_RadioText{} }
func (m *CCSUsrMsg_RadioText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RadioText) ProtoMessage()    {}
func (*CCSUsrMsg_RadioText) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{17}
}

func (m *CCSUsrMsg_RadioText) GetMsgDst() int32 {
	if m != nil {
		return m.MsgDst
	}
	return 0
}

func (m *CCSUsrMsg_RadioText) GetClient() int32 {
	if m != nil {
		return m.Client
	}
	return 0
}

func (m *CCSUsrMsg_RadioText) GetMsgName() string {
	if m != nil {
		return m.MsgName
	}
	return ""
}

func (m *CCSUsrMsg_RadioText) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type CCSUsrMsg_HintText struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text"`
}

func (m *CCSUsrMsg_HintText) Reset()         { *m = CCSUsrMsg_HintText{} }
func (m *CCSUsrMsg_HintText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_HintText) ProtoMessage()    {}
func (*CCSUsrMsg_HintText) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{18}
}

func (m *CCSUsrMsg_HintText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CCSUsrMsg_KeyHintText struct {
	Hints []string `protobuf:"bytes,1,rep,name=hints" json:"hints,omitempty"`
}

func (m *CCSUsrMsg_KeyHintText) Reset()         { *m = CCSUsrMsg_KeyHintText{} }
func (m *CCSUsrMsg_KeyHintText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_KeyHintText) ProtoMessage()    {}
func (*CCSUsrMsg_KeyHintText) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{19}
}

func (m *CCSUsrMsg_KeyHintText) GetHints() []string {
	if m != nil {
		return m.Hints
	}
	return nil
}

type CCSUsrMsg_ProcessSpottedEntityUpdate struct {
	NewUpdate     bool                                                        `protobuf:"varint,1,opt,name=new_update,json=newUpdate" json:"new_update"`
	EntityUpdates []*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate `protobuf:"bytes,2,rep,name=entity_updates,json=entityUpdates" json:"entity_updates,omitempty"`
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) Reset()         { *m = CCSUsrMsg_ProcessSpottedEntityUpdate{} }
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ProcessSpottedEntityUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_ProcessSpottedEntityUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{20}
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) GetNewUpdate() bool {
	if m != nil {
		return m.NewUpdate
	}
	return false
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) GetEntityUpdates() []*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate {
	if m != nil {
		return m.EntityUpdates
	}
	return nil
}

type CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate struct {
	EntityIdx        int32 `protobuf:"varint,1,opt,name=entity_idx,json=entityIdx" json:"entity_idx"`
	ClassId          int32 `protobuf:"varint,2,opt,name=class_id,json=classId" json:"class_id"`
	OriginX          int32 `protobuf:"varint,3,opt,name=origin_x,json=originX" json:"origin_x"`
	OriginY          int32 `protobuf:"varint,4,opt,name=origin_y,json=originY" json:"origin_y"`
	OriginZ          int32 `protobuf:"varint,5,opt,name=origin_z,json=originZ" json:"origin_z"`
	AngleY           int32 `protobuf:"varint,6,opt,name=angle_y,json=angleY" json:"angle_y"`
	Defuser          bool  `protobuf:"varint,7,opt,name=defuser" json:"defuser"`
	PlayerHasDefuser bool  `protobuf:"varint,8,opt,name=player_has_defuser,json=playerHasDefuser" json:"player_has_defuser"`
	PlayerHasC4      bool  `protobuf:"varint,9,opt,name=player_has_c4,json=playerHasC4" json:"player_has_c4"`
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Reset() {
	*m = CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate{}
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) ProtoMessage() {}
func (*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{20, 0}
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetEntityIdx() int32 {
	if m != nil {
		return m.EntityIdx
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetOriginX() int32 {
	if m != nil {
		return m.OriginX
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetOriginY() int32 {
	if m != nil {
		return m.OriginY
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetOriginZ() int32 {
	if m != nil {
		return m.OriginZ
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetAngleY() int32 {
	if m != nil {
		return m.AngleY
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetDefuser() bool {
	if m != nil {
		return m.Defuser
	}
	return false
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetPlayerHasDefuser() bool {
	if m != nil {
		return m.PlayerHasDefuser
	}
	return false
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetPlayerHasC4() bool {
	if m != nil {
		return m.PlayerHasC4
	}
	return false
}

type CCSUsrMsg_SendPlayerItemDrops struct {
	EntityUpdates []*CEconItemPreviewDataBlock `protobuf:"bytes,1,rep,name=entity_updates,json=entityUpdates" json:"entity_updates,omitempty"`
}

func (m *CCSUsrMsg_SendPlayerItemDrops) Reset()         { *m = CCSUsrMsg_SendPlayerItemDrops{} }
func (m *CCSUsrMsg_SendPlayerItemDrops) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SendPlayerItemDrops) ProtoMessage()    {}
func (*CCSUsrMsg_SendPlayerItemDrops) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{21}
}

func (m *CCSUsrMsg_SendPlayerItemDrops) GetEntityUpdates() []*CEconItemPreviewDataBlock {
	if m != nil {
		return m.EntityUpdates
	}
	return nil
}

type CCSUsrMsg_SendPlayerItemFound struct {
	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
	Entindex int32                      `protobuf:"varint,2,opt,name=entindex" json:"entindex"`
}

func (m *CCSUsrMsg_SendPlayerItemFound) Reset()         { *m = CCSUsrMsg_SendPlayerItemFound{} }
func (m *CCSUsrMsg_SendPlayerItemFound) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SendPlayerItemFound) ProtoMessage()    {}
func (*CCSUsrMsg_SendPlayerItemFound) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{22}
}

func (m *CCSUsrMsg_SendPlayerItemFound) GetIteminfo() *CEconItemPreviewDataBlock {
	if m != nil {
		return m.Iteminfo
	}
	return nil
}

func (m *CCSUsrMsg_SendPlayerItemFound) GetEntindex() int32 {
	if m != nil {
		return m.Entindex
	}
	return 0
}

type CCSUsrMsg_ReloadEffect struct {
	Entidx  int32   `protobuf:"varint,1,opt,name=entidx" json:"entidx"`
	Actanim int32   `protobuf:"varint,2,opt,name=actanim" json:"actanim"`
	OriginX float32 `protobuf:"fixed32,3,opt,name=origin_x,json=originX" json:"origin_x"`
	OriginY float32 `protobuf:"fixed32,4,opt,name=origin_y,json=originY" json:"origin_y"`
	OriginZ float32 `protobuf:"fixed32,5,opt,name=origin_z,json=originZ" json:"origin_z"`
}

func (m *CCSUsrMsg_ReloadEffect) Reset()         { *m = CCSUsrMsg_ReloadEffect{} }
func (m *CCSUsrMsg_ReloadEffect) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ReloadEffect) ProtoMessage()    {}
func (*CCSUsrMsg_ReloadEffect) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{23}
}

func (m *CCSUsrMsg_ReloadEffect) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

func (m *CCSUsrMsg_ReloadEffect) GetActanim() int32 {
	if m != nil {
		return m.Actanim
	}
	return 0
}

func (m *CCSUsrMsg_ReloadEffect) GetOriginX() float32 {
	if m != nil {
		return m.OriginX
	}
	return 0
}

func (m *CCSUsrMsg_ReloadEffect) GetOriginY() float32 {
	if m != nil {
		return m.OriginY
	}
	return 0
}

func (m *CCSUsrMsg_ReloadEffect) GetOriginZ() float32 {
	if m != nil {
		return m.OriginZ
	}
	return 0
}

type CCSUsrMsg_AdjustMoney struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount" json:"amount"`
}

func (m *CCSUsrMsg_AdjustMoney) Reset()         { *m = CCSUsrMsg_AdjustMoney{} }
func (m *CCSUsrMsg_AdjustMoney) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_AdjustMoney) ProtoMessage()    {}
func (*CCSUsrMsg_AdjustMoney) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{24}
}

func (m *CCSUsrMsg_AdjustMoney) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CCSUsrMsg_ReportHit struct {
	PosX      float32 `protobuf:"fixed32,1,opt,name=pos_x,json=posX" json:"pos_x"`
	PosY      float32 `protobuf:"fixed32,2,opt,name=pos_y,json=posY" json:"pos_y"`
	Timestamp float32 `protobuf:"fixed32,4,opt,name=timestamp" json:"timestamp"`
	PosZ      float32 `protobuf:"fixed32,3,opt,name=pos_z,json=posZ" json:"pos_z"`
}

func (m *CCSUsrMsg_ReportHit) Reset()         { *m = CCSUsrMsg_ReportHit{} }
func (m *CCSUsrMsg_ReportHit) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ReportHit) ProtoMessage()    {}
func (*CCSUsrMsg_ReportHit) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{25}
}

func (m *CCSUsrMsg_ReportHit) GetPosX() float32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *CCSUsrMsg_ReportHit) GetPosY() float32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *CCSUsrMsg_ReportHit) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CCSUsrMsg_ReportHit) GetPosZ() float32 {
	if m != nil {
		return m.PosZ
	}
	return 0
}

type CCSUsrMsg_KillCam struct {
	ObsMode      int32 `protobuf:"varint,1,opt,name=obs_mode,json=obsMode" json:"obs_mode"`
	FirstTarget  int32 `protobuf:"varint,2,opt,name=first_target,json=firstTarget" json:"first_target"`
	SecondTarget int32 `protobuf:"varint,3,opt,name=second_target,json=secondTarget" json:"second_target"`
}

func (m *CCSUsrMsg_KillCam) Reset()         { *m = CCSUsrMsg_KillCam{} }
func (m *CCSUsrMsg_KillCam) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_KillCam) ProtoMessage()    {}
func (*CCSUsrMsg_KillCam) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{26}
}

func (m *CCSUsrMsg_KillCam) GetObsMode() int32 {
	if m != nil {
		return m.ObsMode
	}
	return 0
}

func (m *CCSUsrMsg_KillCam) GetFirstTarget() int32 {
	if m != nil {
		return m.FirstTarget
	}
	return 0
}

func (m *CCSUsrMsg_KillCam) GetSecondTarget() int32 {
	if m != nil {
		return m.SecondTarget
	}
	return 0
}

type CCSUsrMsg_DesiredTimescale struct {
	DesiredTimescale    float32 `protobuf:"fixed32,1,opt,name=desired_timescale,json=desiredTimescale" json:"desired_timescale"`
	DurationRealtimeSec float32 `protobuf:"fixed32,2,opt,name=duration_realtime_sec,json=durationRealtimeSec" json:"duration_realtime_sec"`
	InterpolatorType    int32   `protobuf:"varint,3,opt,name=interpolator_type,json=interpolatorType" json:"interpolator_type"`
	StartBlendTime      float32 `protobuf:"fixed32,4,opt,name=start_blend_time,json=startBlendTime" json:"start_blend_time"`
}

func (m *CCSUsrMsg_DesiredTimescale) Reset()         { *m = CCSUsrMsg_DesiredTimescale{} }
func (m *CCSUsrMsg_DesiredTimescale) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_DesiredTimescale) ProtoMessage()    {}
func (*CCSUsrMsg_DesiredTimescale) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{27}
}

func (m *CCSUsrMsg_DesiredTimescale) GetDesiredTimescale() float32 {
	if m != nil {
		return m.DesiredTimescale
	}
	return 0
}

func (m *CCSUsrMsg_DesiredTimescale) GetDurationRealtimeSec() float32 {
	if m != nil {
		return m.DurationRealtimeSec
	}
	return 0
}

func (m *CCSUsrMsg_DesiredTimescale) GetInterpolatorType() int32 {
	if m != nil {
		return m.InterpolatorType
	}
	return 0
}

func (m *CCSUsrMsg_DesiredTimescale) GetStartBlendTime() float32 {
	if m != nil {
		return m.StartBlendTime
	}
	return 0
}

type CCSUsrMsg_CurrentTimescale struct {
	CurTimescale float32 `protobuf:"fixed32,1,opt,name=cur_timescale,json=curTimescale" json:"cur_timescale"`
}

func (m *CCSUsrMsg_CurrentTimescale) Reset()         { *m = CCSUsrMsg_CurrentTimescale{} }
func (m *CCSUsrMsg_CurrentTimescale) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CurrentTimescale) ProtoMessage()    {}
func (*CCSUsrMsg_CurrentTimescale) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{28}
}

func (m *CCSUsrMsg_CurrentTimescale) GetCurTimescale() float32 {
	if m != nil {
		return m.CurTimescale
	}
	return 0
}

type CCSUsrMsg_AchievementEvent struct {
	Achievement int32 `protobuf:"varint,1,opt,name=achievement" json:"achievement"`
	Count       int32 `protobuf:"varint,2,opt,name=count" json:"count"`
	UserId      int32 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id"`
}

func (m *CCSUsrMsg_AchievementEvent) Reset()         { *m = CCSUsrMsg_AchievementEvent{} }
func (m *CCSUsrMsg_AchievementEvent) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_AchievementEvent) ProtoMessage()    {}
func (*CCSUsrMsg_AchievementEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{29}
}

func (m *CCSUsrMsg_AchievementEvent) GetAchievement() int32 {
	if m != nil {
		return m.Achievement
	}
	return 0
}

func (m *CCSUsrMsg_AchievementEvent) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CCSUsrMsg_AchievementEvent) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CCSUsrMsg_MatchEndConditions struct {
	Fraglimit   int32 `protobuf:"varint,1,opt,name=fraglimit" json:"fraglimit"`
	MpMaxrounds int32 `protobuf:"varint,2,opt,name=mp_maxrounds,json=mpMaxrounds" json:"mp_maxrounds"`
	MpWinlimit  int32 `protobuf:"varint,3,opt,name=mp_winlimit,json=mpWinlimit" json:"mp_winlimit"`
	MpTimelimit int32 `protobuf:"varint,4,opt,name=mp_timelimit,json=mpTimelimit" json:"mp_timelimit"`
}

func (m *CCSUsrMsg_MatchEndConditions) Reset()         { *m = CCSUsrMsg_MatchEndConditions{} }
func (m *CCSUsrMsg_MatchEndConditions) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_MatchEndConditions) ProtoMessage()    {}
func (*CCSUsrMsg_MatchEndConditions) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{30}
}

func (m *CCSUsrMsg_MatchEndConditions) GetFraglimit() int32 {
	if m != nil {
		return m.Fraglimit
	}
	return 0
}

func (m *CCSUsrMsg_MatchEndConditions) GetMpMaxrounds() int32 {
	if m != nil {
		return m.MpMaxrounds
	}
	return 0
}

func (m *CCSUsrMsg_MatchEndConditions) GetMpWinlimit() int32 {
	if m != nil {
		return m.MpWinlimit
	}
	return 0
}

func (m *CCSUsrMsg_MatchEndConditions) GetMpTimelimit() int32 {
	if m != nil {
		return m.MpTimelimit
	}
	return 0
}

type CCSUsrMsg_PlayerStatsUpdate struct {
	Version int32                               `protobuf:"varint,1,opt,name=version" json:"version"`
	Stats   []*CCSUsrMsg_PlayerStatsUpdate_Stat `protobuf:"bytes,4,rep,name=stats" json:"stats,omitempty"`
	UserId  int32                               `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id"`
	Crc     int32                               `protobuf:"varint,6,opt,name=crc" json:"crc"`
}

func (m *CCSUsrMsg_PlayerStatsUpdate) Reset()         { *m = CCSUsrMsg_PlayerStatsUpdate{} }
func (m *CCSUsrMsg_PlayerStatsUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_PlayerStatsUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_PlayerStatsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{31}
}

func (m *CCSUsrMsg_PlayerStatsUpdate) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CCSUsrMsg_PlayerStatsUpdate) GetStats() []*CCSUsrMsg_PlayerStatsUpdate_Stat {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CCSUsrMsg_PlayerStatsUpdate) GetCrc() int32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

type CCSUsrMsg_PlayerStatsUpdate_Stat struct {
	Idx   int32 `protobuf:"varint,1,opt,name=idx" json:"idx"`
	Delta int32 `protobuf:"varint,2,opt,name=delta" json:"delta"`
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) Reset()         { *m = CCSUsrMsg_PlayerStatsUpdate_Stat{} }
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_PlayerStatsUpdate_Stat) ProtoMessage()    {}
func (*CCSUsrMsg_PlayerStatsUpdate_Stat) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{31, 0}
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) GetDelta() int32 {
	if m != nil {
		return m.Delta
	}
	return 0
}

type CCSUsrMsg_DisplayInventory struct {
	Display bool  `protobuf:"varint,1,opt,name=display" json:"display"`
	UserId  int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id"`
}

func (m *CCSUsrMsg_DisplayInventory) Reset()         { *m = CCSUsrMsg_DisplayInventory{} }
func (m *CCSUsrMsg_DisplayInventory) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_DisplayInventory) ProtoMessage()    {}
func (*CCSUsrMsg_DisplayInventory) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{32}
}

func (m *CCSUsrMsg_DisplayInventory) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

func (m *CCSUsrMsg_DisplayInventory) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CCSUsrMsg_QuestProgress struct {
	QuestId      uint32 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id"`
	NormalPoints uint32 `protobuf:"varint,2,opt,name=normal_points,json=normalPoints" json:"normal_points"`
	BonusPoints  uint32 `protobuf:"varint,3,opt,name=bonus_points,json=bonusPoints" json:"bonus_points"`
	IsEventQuest bool   `protobuf:"varint,4,opt,name=is_event_quest,json=isEventQuest" json:"is_event_quest"`
}

func (m *CCSUsrMsg_QuestProgress) Reset()         { *m = CCSUsrMsg_QuestProgress{} }
func (m *CCSUsrMsg_QuestProgress) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_QuestProgress) ProtoMessage()    {}
func (*CCSUsrMsg_QuestProgress) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{33}
}

func (m *CCSUsrMsg_QuestProgress) GetQuestId() uint32 {
	if m != nil {
		return m.QuestId
	}
	return 0
}

func (m *CCSUsrMsg_QuestProgress) GetNormalPoints() uint32 {
	if m != nil {
		return m.NormalPoints
	}
	return 0
}

func (m *CCSUsrMsg_QuestProgress) GetBonusPoints() uint32 {
	if m != nil {
		return m.BonusPoints
	}
	return 0
}

func (m *CCSUsrMsg_QuestProgress) GetIsEventQuest() bool {
	if m != nil {
		return m.IsEventQuest
	}
	return false
}

type CCSUsrMsg_ScoreLeaderboardData struct {
	Data *ScoreLeaderboardData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CCSUsrMsg_ScoreLeaderboardData) Reset()         { *m = CCSUsrMsg_ScoreLeaderboardData{} }
func (m *CCSUsrMsg_ScoreLeaderboardData) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ScoreLeaderboardData) ProtoMessage()    {}
func (*CCSUsrMsg_ScoreLeaderboardData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{34}
}

func (m *CCSUsrMsg_ScoreLeaderboardData) GetData() *ScoreLeaderboardData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CCSUsrMsg_XRankGet struct {
	ModeIdx    int32 `protobuf:"varint,1,opt,name=mode_idx,json=modeIdx" json:"mode_idx"`
	Controller int32 `protobuf:"varint,2,opt,name=controller" json:"controller"`
}

func (m *CCSUsrMsg_XRankGet) Reset()         { *m = CCSUsrMsg_XRankGet{} }
func (m *CCSUsrMsg_XRankGet) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_XRankGet) ProtoMessage()    {}
func (*CCSUsrMsg_XRankGet) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{35}
}

func (m *CCSUsrMsg_XRankGet) GetModeIdx() int32 {
	if m != nil {
		return m.ModeIdx
	}
	return 0
}

func (m *CCSUsrMsg_XRankGet) GetController() int32 {
	if m != nil {
		return m.Controller
	}
	return 0
}

type CCSUsrMsg_XRankUpd struct {
	ModeIdx    int32 `protobuf:"varint,1,opt,name=mode_idx,json=modeIdx" json:"mode_idx"`
	Controller int32 `protobuf:"varint,2,opt,name=controller" json:"controller"`
	Ranking    int32 `protobuf:"varint,3,opt,name=ranking" json:"ranking"`
}

func (m *CCSUsrMsg_XRankUpd) Reset()         { *m = CCSUsrMsg_XRankUpd{} }
func (m *CCSUsrMsg_XRankUpd) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_XRankUpd) ProtoMessage()    {}
func (*CCSUsrMsg_XRankUpd) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{36}
}

func (m *CCSUsrMsg_XRankUpd) GetModeIdx() int32 {
	if m != nil {
		return m.ModeIdx
	}
	return 0
}

func (m *CCSUsrMsg_XRankUpd) GetController() int32 {
	if m != nil {
		return m.Controller
	}
	return 0
}

func (m *CCSUsrMsg_XRankUpd) GetRanking() int32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

type CCSUsrMsg_CallVoteFailed struct {
	Reason int32 `protobuf:"varint,1,opt,name=reason" json:"reason"`
	Time   int32 `protobuf:"varint,2,opt,name=time" json:"time"`
}

func (m *CCSUsrMsg_CallVoteFailed) Reset()         { *m = CCSUsrMsg_CallVoteFailed{} }
func (m *CCSUsrMsg_CallVoteFailed) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CallVoteFailed) ProtoMessage()    {}
func (*CCSUsrMsg_CallVoteFailed) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{37}
}

func (m *CCSUsrMsg_CallVoteFailed) GetReason() int32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *CCSUsrMsg_CallVoteFailed) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type CCSUsrMsg_VoteStart struct {
	Team         int32  `protobuf:"varint,1,opt,name=team" json:"team"`
	EntIdx       int32  `protobuf:"varint,2,opt,name=ent_idx,json=entIdx" json:"ent_idx"`
	VoteType     int32  `protobuf:"varint,3,opt,name=vote_type,json=voteType" json:"vote_type"`
	DispStr      string `protobuf:"bytes,4,opt,name=disp_str,json=dispStr" json:"disp_str"`
	DetailsStr   string `protobuf:"bytes,5,opt,name=details_str,json=detailsStr" json:"details_str"`
	OtherTeamStr string `protobuf:"bytes,6,opt,name=other_team_str,json=otherTeamStr" json:"other_team_str"`
	IsYesNoVote  bool   `protobuf:"varint,7,opt,name=is_yes_no_vote,json=isYesNoVote" json:"is_yes_no_vote"`
}

func (m *CCSUsrMsg_VoteStart) Reset()         { *m = CCSUsrMsg_VoteStart{} }
func (m *CCSUsrMsg_VoteStart) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoteStart) ProtoMessage()    {}
func (*CCSUsrMsg_VoteStart) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{38}
}

func (m *CCSUsrMsg_VoteStart) GetTeam() int32 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *CCSUsrMsg_VoteStart) GetEntIdx() int32 {
	if m != nil {
		return m.EntIdx
	}
	return 0
}

func (m *CCSUsrMsg_VoteStart) GetVoteType() int32 {
	if m != nil {
		return m.VoteType
	}
	return 0
}

func (m *CCSUsrMsg_VoteStart) GetDispStr() string {
	if m != nil {
		return m.DispStr
	}
	return ""
}

func (m *CCSUsrMsg_VoteStart) GetDetailsStr() string {
	if m != nil {
		return m.DetailsStr
	}
	return ""
}

func (m *CCSUsrMsg_VoteStart) GetOtherTeamStr() string {
	if m != nil {
		return m.OtherTeamStr
	}
	return ""
}

func (m *CCSUsrMsg_VoteStart) GetIsYesNoVote() bool {
	if m != nil {
		return m.IsYesNoVote
	}
	return false
}

type CCSUsrMsg_VotePass struct {
	Team       int32  `protobuf:"varint,1,opt,name=team" json:"team"`
	VoteType   int32  `protobuf:"varint,2,opt,name=vote_type,json=voteType" json:"vote_type"`
	DispStr    string `protobuf:"bytes,3,opt,name=disp_str,json=dispStr" json:"disp_str"`
	DetailsStr string `protobuf:"bytes,4,opt,name=details_str,json=detailsStr" json:"details_str"`
}

func (m *CCSUsrMsg_VotePass) Reset()         { *m = CCSUsrMsg_VotePass{} }
func (m *CCSUsrMsg_VotePass) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VotePass) ProtoMessage()    {}
func (*CCSUsrMsg_VotePass) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{39}
}

func (m *CCSUsrMsg_VotePass) GetTeam() int32 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *CCSUsrMsg_VotePass) GetVoteType() int32 {
	if m != nil {
		return m.VoteType
	}
	return 0
}

func (m *CCSUsrMsg_VotePass) GetDispStr() string {
	if m != nil {
		return m.DispStr
	}
	return ""
}

func (m *CCSUsrMsg_VotePass) GetDetailsStr() string {
	if m != nil {
		return m.DetailsStr
	}
	return ""
}

type CCSUsrMsg_VoteFailed struct {
	Team   int32 `protobuf:"varint,1,opt,name=team" json:"team"`
	Reason int32 `protobuf:"varint,2,opt,name=reason" json:"reason"`
}

func (m *CCSUsrMsg_VoteFailed) Reset()         { *m = CCSUsrMsg_VoteFailed{} }
func (m *CCSUsrMsg_VoteFailed) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoteFailed) ProtoMessage()    {}
func (*CCSUsrMsg_VoteFailed) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{40}
}

func (m *CCSUsrMsg_VoteFailed) GetTeam() int32 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *CCSUsrMsg_VoteFailed) GetReason() int32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type CCSUsrMsg_VoteSetup struct {
	PotentialIssues []string `protobuf:"bytes,1,rep,name=potential_issues,json=potentialIssues" json:"potential_issues,omitempty"`
}

func (m *CCSUsrMsg_VoteSetup) Reset()         { *m = CCSUsrMsg_VoteSetup{} }
func (m *CCSUsrMsg_VoteSetup) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoteSetup) ProtoMessage()    {}
func (*CCSUsrMsg_VoteSetup) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{41}
}

func (m *CCSUsrMsg_VoteSetup) GetPotentialIssues() []string {
	if m != nil {
		return m.PotentialIssues
	}
	return nil
}

type CCSUsrMsg_SendLastKillerDamageToClient struct {
	NumHitsGiven int32 `protobuf:"varint,1,opt,name=num_hits_given,json=numHitsGiven" json:"num_hits_given"`
	DamageGiven  int32 `protobuf:"varint,2,opt,name=damage_given,json=damageGiven" json:"damage_given"`
	NumHitsTaken int32 `protobuf:"varint,3,opt,name=num_hits_taken,json=numHitsTaken" json:"num_hits_taken"`
	DamageTaken  int32 `protobuf:"varint,4,opt,name=damage_taken,json=damageTaken" json:"damage_taken"`
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) Reset() {
	*m = CCSUsrMsg_SendLastKillerDamageToClient{}
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SendLastKillerDamageToClient) ProtoMessage()    {}
func (*CCSUsrMsg_SendLastKillerDamageToClient) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{42}
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) GetNumHitsGiven() int32 {
	if m != nil {
		return m.NumHitsGiven
	}
	return 0
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) GetDamageGiven() int32 {
	if m != nil {
		return m.DamageGiven
	}
	return 0
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) GetNumHitsTaken() int32 {
	if m != nil {
		return m.NumHitsTaken
	}
	return 0
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) GetDamageTaken() int32 {
	if m != nil {
		return m.DamageTaken
	}
	return 0
}

type CCSUsrMsg_ServerRankUpdate struct {
	RankUpdate []*CCSUsrMsg_ServerRankUpdate_RankUpdate `protobuf:"bytes,1,rep,name=rank_update,json=rankUpdate" json:"rank_update,omitempty"`
}

func (m *CCSUsrMsg_ServerRankUpdate) Reset()         { *m = CCSUsrMsg_ServerRankUpdate{} }
func (m *CCSUsrMsg_ServerRankUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ServerRankUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_ServerRankUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{43}
}

func (m *CCSUsrMsg_ServerRankUpdate) GetRankUpdate() []*CCSUsrMsg_ServerRankUpdate_RankUpdate {
	if m != nil {
		return m.RankUpdate
	}
	return nil
}

type CCSUsrMsg_ServerRankUpdate_RankUpdate struct {
	AccountId  int32   `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	RankOld    int32   `protobuf:"varint,2,opt,name=rank_old,json=rankOld" json:"rank_old"`
	RankNew    int32   `protobuf:"varint,3,opt,name=rank_new,json=rankNew" json:"rank_new"`
	NumWins    int32   `protobuf:"varint,4,opt,name=num_wins,json=numWins" json:"num_wins"`
	RankChange float32 `protobuf:"fixed32,5,opt,name=rank_change,json=rankChange" json:"rank_change"`
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) Reset()         { *m = CCSUsrMsg_ServerRankUpdate_RankUpdate{} }
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ServerRankUpdate_RankUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_ServerRankUpdate_RankUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{43, 0}
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetRankOld() int32 {
	if m != nil {
		return m.RankOld
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetRankNew() int32 {
	if m != nil {
		return m.RankNew
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetNumWins() int32 {
	if m != nil {
		return m.NumWins
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetRankChange() float32 {
	if m != nil {
		return m.RankChange
	}
	return 0
}

type CCSUsrMsg_XpUpdate struct {
	Data *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CCSUsrMsg_XpUpdate) Reset()         { *m = CCSUsrMsg_XpUpdate{} }
func (m *CCSUsrMsg_XpUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_XpUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_XpUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{44}
}

func (m *CCSUsrMsg_XpUpdate) GetData() *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded {
	if m != nil {
		return m.Data
	}
	return nil
}

type CCSUsrMsg_ItemPickup struct {
	Item string `protobuf:"bytes,1,opt,name=item" json:"item"`
}

func (m *CCSUsrMsg_ItemPickup) Reset()         { *m = CCSUsrMsg_ItemPickup{} }
func (m *CCSUsrMsg_ItemPickup) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ItemPickup) ProtoMessage()    {}
func (*CCSUsrMsg_ItemPickup) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{45}
}

func (m *CCSUsrMsg_ItemPickup) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

type CCSUsrMsg_ShowMenu struct {
	BitsValidSlots int32  `protobuf:"varint,1,opt,name=bits_valid_slots,json=bitsValidSlots" json:"bits_valid_slots"`
	DisplayTime    int32  `protobuf:"varint,2,opt,name=display_time,json=displayTime" json:"display_time"`
	MenuString     string `protobuf:"bytes,3,opt,name=menu_string,json=menuString" json:"menu_string"`
}

func (m *CCSUsrMsg_ShowMenu) Reset()         { *m = CCSUsrMsg_ShowMenu{} }
func (m *CCSUsrMsg_ShowMenu) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ShowMenu) ProtoMessage()    {}
func (*CCSUsrMsg_ShowMenu) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{46}
}

func (m *CCSUsrMsg_ShowMenu) GetBitsValidSlots() int32 {
	if m != nil {
		return m.BitsValidSlots
	}
	return 0
}

func (m *CCSUsrMsg_ShowMenu) GetDisplayTime() int32 {
	if m != nil {
		return m.DisplayTime
	}
	return 0
}

func (m *CCSUsrMsg_ShowMenu) GetMenuString() string {
	if m != nil {
		return m.MenuString
	}
	return ""
}

type CCSUsrMsg_BarTime struct {
	Time string `protobuf:"bytes,1,opt,name=time" json:"time"`
}

func (m *CCSUsrMsg_BarTime) Reset()         { *m = CCSUsrMsg_BarTime{} }
func (m *CCSUsrMsg_BarTime) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_BarTime) ProtoMessage()    {}
func (*CCSUsrMsg_BarTime) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{47}
}

func (m *CCSUsrMsg_BarTime) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type CCSUsrMsg_AmmoDenied struct {
	AmmoIdx int32 `protobuf:"varint,1,opt,name=ammoIdx" json:"ammoIdx"`
}

func (m *CCSUsrMsg_AmmoDenied) Reset()         { *m = CCSUsrMsg_AmmoDenied{} }
func (m *CCSUsrMsg_AmmoDenied) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_AmmoDenied) ProtoMessage()    {}
func (*CCSUsrMsg_AmmoDenied) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{48}
}

func (m *CCSUsrMsg_AmmoDenied) GetAmmoIdx() int32 {
	if m != nil {
		return m.AmmoIdx
	}
	return 0
}

type CCSUsrMsg_MarkAchievement struct {
	Achievement string `protobuf:"bytes,1,opt,name=achievement" json:"achievement"`
}

func (m *CCSUsrMsg_MarkAchievement) Reset()         { *m = CCSUsrMsg_MarkAchievement{} }
func (m *CCSUsrMsg_MarkAchievement) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_MarkAchievement) ProtoMessage()    {}
func (*CCSUsrMsg_MarkAchievement) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{49}
}

func (m *CCSUsrMsg_MarkAchievement) GetAchievement() string {
	if m != nil {
		return m.Achievement
	}
	return ""
}

type CCSUsrMsg_MatchStatsUpdate struct {
	Update string `protobuf:"bytes,1,opt,name=update" json:"update"`
}

func (m *CCSUsrMsg_MatchStatsUpdate) Reset()         { *m = CCSUsrMsg_MatchStatsUpdate{} }
func (m *CCSUsrMsg_MatchStatsUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_MatchStatsUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_MatchStatsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{50}
}

func (m *CCSUsrMsg_MatchStatsUpdate) GetUpdate() string {
	if m != nil {
		return m.Update
	}
	return ""
}

type CCSUsrMsg_ItemDrop struct {
	Itemid int64 `protobuf:"varint,1,opt,name=itemid" json:"itemid"`
	Death  bool  `protobuf:"varint,2,opt,name=death" json:"death"`
}

func (m *CCSUsrMsg_ItemDrop) Reset()         { *m = CCSUsrMsg_ItemDrop{} }
func (m *CCSUsrMsg_ItemDrop) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ItemDrop) ProtoMessage()    {}
func (*CCSUsrMsg_ItemDrop) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{51}
}

func (m *CCSUsrMsg_ItemDrop) GetItemid() int64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *CCSUsrMsg_ItemDrop) GetDeath() bool {
	if m != nil {
		return m.Death
	}
	return false
}

type CCSUsrMsg_GlowPropTurnOff struct {
	Entidx int32 `protobuf:"varint,1,opt,name=entidx" json:"entidx"`
}

func (m *CCSUsrMsg_GlowPropTurnOff) Reset()         { *m = CCSUsrMsg_GlowPropTurnOff{} }
func (m *CCSUsrMsg_GlowPropTurnOff) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_GlowPropTurnOff) ProtoMessage()    {}
func (*CCSUsrMsg_GlowPropTurnOff) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{52}
}

func (m *CCSUsrMsg_GlowPropTurnOff) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

type CCSUsrMsg_RoundBackupFilenames struct {
	Count    int32  `protobuf:"varint,1,opt,name=count" json:"count"`
	Index    int32  `protobuf:"varint,2,opt,name=index" json:"index"`
	Filename string `protobuf:"bytes,3,opt,name=filename" json:"filename"`
	Nicename string `protobuf:"bytes,4,opt,name=nicename" json:"nicename"`
}

func (m *CCSUsrMsg_RoundBackupFilenames) Reset()         { *m = CCSUsrMsg_RoundBackupFilenames{} }
func (m *CCSUsrMsg_RoundBackupFilenames) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RoundBackupFilenames) ProtoMessage()    {}
func (*CCSUsrMsg_RoundBackupFilenames) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{53}
}

func (m *CCSUsrMsg_RoundBackupFilenames) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CCSUsrMsg_RoundBackupFilenames) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CCSUsrMsg_RoundBackupFilenames) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *CCSUsrMsg_RoundBackupFilenames) GetNicename() string {
	if m != nil {
		return m.Nicename
	}
	return ""
}

type CCSUsrMsg_ResetHud struct {
	Reset_ bool `protobuf:"varint,1,opt,name=reset" json:"reset"`
}

func (m *CCSUsrMsg_ResetHud) Reset()         { *m = CCSUsrMsg_ResetHud{} }
func (m *CCSUsrMsg_ResetHud) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ResetHud) ProtoMessage()    {}
func (*CCSUsrMsg_ResetHud) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{54}
}

func (m *CCSUsrMsg_ResetHud) GetReset_() bool {
	if m != nil {
		return m.Reset_
	}
	return false
}

type CCSUsrMsg_GameTitle struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_GameTitle) Reset()         { *m = CCSUsrMsg_GameTitle{} }
func (m *CCSUsrMsg_GameTitle) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_GameTitle) ProtoMessage()    {}
func (*CCSUsrMsg_GameTitle) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{55}
}

func (m *CCSUsrMsg_GameTitle) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_RequestState struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_RequestState) Reset()         { *m = CCSUsrMsg_RequestState{} }
func (m *CCSUsrMsg_RequestState) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RequestState) ProtoMessage()    {}
func (*CCSUsrMsg_RequestState) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{56}
}

func (m *CCSUsrMsg_RequestState) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_StopSpectatorMode struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_StopSpectatorMode) Reset()         { *m = CCSUsrMsg_StopSpectatorMode{} }
func (m *CCSUsrMsg_StopSpectatorMode) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_StopSpectatorMode) ProtoMessage()    {}
func (*CCSUsrMsg_StopSpectatorMode) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{57}
}

func (m *CCSUsrMsg_StopSpectatorMode) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_DisconnectToLobby struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_DisconnectToLobby) Reset()         { *m = CCSUsrMsg_DisconnectToLobby{} }
func (m *CCSUsrMsg_DisconnectToLobby) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_DisconnectToLobby) ProtoMessage()    {}
func (*CCSUsrMsg_DisconnectToLobby) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{58}
}

func (m *CCSUsrMsg_DisconnectToLobby) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_WarmupHasEnded struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_WarmupHasEnded) Reset()         { *m = CCSUsrMsg_WarmupHasEnded{} }
func (m *CCSUsrMsg_WarmupHasEnded) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_WarmupHasEnded) ProtoMessage()    {}
func (*CCSUsrMsg_WarmupHasEnded) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{59}
}

func (m *CCSUsrMsg_WarmupHasEnded) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_ClientInfo struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_ClientInfo) Reset()         { *m = CCSUsrMsg_ClientInfo{} }
func (m *CCSUsrMsg_ClientInfo) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ClientInfo) ProtoMessage()    {}
func (*CCSUsrMsg_ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{60}
}

func (m *CCSUsrMsg_ClientInfo) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_ServerRankRevealAll struct {
	SecondsTillShutdown int32 `protobuf:"varint,1,opt,name=seconds_till_shutdown,json=secondsTillShutdown" json:"seconds_till_shutdown"`
}

func (m *CCSUsrMsg_ServerRankRevealAll) Reset()         { *m = CCSUsrMsg_ServerRankRevealAll{} }
func (m *CCSUsrMsg_ServerRankRevealAll) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ServerRankRevealAll) ProtoMessage()    {}
func (*CCSUsrMsg_ServerRankRevealAll) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Usermessages, []int{61}
}

func (m *CCSUsrMsg_ServerRankRevealAll) GetSecondsTillShutdown() int32 {
	if m != nil {
		return m.SecondsTillShutdown
	}
	return 0
}

func init() {
	proto.RegisterType((*CCSUsrMsg_VGUIMenu)(nil), "CCSUsrMsg_VGUIMenu")
	proto.RegisterType((*CCSUsrMsg_VGUIMenu_Subkey)(nil), "CCSUsrMsg_VGUIMenu.Subkey")
	proto.RegisterType((*CCSUsrMsg_Geiger)(nil), "CCSUsrMsg_Geiger")
	proto.RegisterType((*CCSUsrMsg_Train)(nil), "CCSUsrMsg_Train")
	proto.RegisterType((*CCSUsrMsg_HudText)(nil), "CCSUsrMsg_HudText")
	proto.RegisterType((*CCSUsrMsg_SayText)(nil), "CCSUsrMsg_SayText")
	proto.RegisterType((*CCSUsrMsg_SayText2)(nil), "CCSUsrMsg_SayText2")
	proto.RegisterType((*CCSUsrMsg_TextMsg)(nil), "CCSUsrMsg_TextMsg")
	proto.RegisterType((*CCSUsrMsg_HudMsg)(nil), "CCSUsrMsg_HudMsg")
	proto.RegisterType((*CCSUsrMsg_Shake)(nil), "CCSUsrMsg_Shake")
	proto.RegisterType((*CCSUsrMsg_Fade)(nil), "CCSUsrMsg_Fade")
	proto.RegisterType((*CCSUsrMsg_Rumble)(nil), "CCSUsrMsg_Rumble")
	proto.RegisterType((*CCSUsrMsg_CloseCaption)(nil), "CCSUsrMsg_CloseCaption")
	proto.RegisterType((*CCSUsrMsg_CloseCaptionDirect)(nil), "CCSUsrMsg_CloseCaptionDirect")
	proto.RegisterType((*CCSUsrMsg_SendAudio)(nil), "CCSUsrMsg_SendAudio")
	proto.RegisterType((*CCSUsrMsg_RawAudio)(nil), "CCSUsrMsg_RawAudio")
	proto.RegisterType((*CCSUsrMsg_VoiceMask)(nil), "CCSUsrMsg_VoiceMask")
	proto.RegisterType((*CCSUsrMsg_VoiceMask_PlayerMask)(nil), "CCSUsrMsg_VoiceMask.PlayerMask")
	proto.RegisterType((*CCSUsrMsg_Damage)(nil), "CCSUsrMsg_Damage")
	proto.RegisterType((*CCSUsrMsg_RadioText)(nil), "CCSUsrMsg_RadioText")
	proto.RegisterType((*CCSUsrMsg_HintText)(nil), "CCSUsrMsg_HintText")
	proto.RegisterType((*CCSUsrMsg_KeyHintText)(nil), "CCSUsrMsg_KeyHintText")
	proto.RegisterType((*CCSUsrMsg_ProcessSpottedEntityUpdate)(nil), "CCSUsrMsg_ProcessSpottedEntityUpdate")
	proto.RegisterType((*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate)(nil), "CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate")
	proto.RegisterType((*CCSUsrMsg_SendPlayerItemDrops)(nil), "CCSUsrMsg_SendPlayerItemDrops")
	proto.RegisterType((*CCSUsrMsg_SendPlayerItemFound)(nil), "CCSUsrMsg_SendPlayerItemFound")
	proto.RegisterType((*CCSUsrMsg_ReloadEffect)(nil), "CCSUsrMsg_ReloadEffect")
	proto.RegisterType((*CCSUsrMsg_AdjustMoney)(nil), "CCSUsrMsg_AdjustMoney")
	proto.RegisterType((*CCSUsrMsg_ReportHit)(nil), "CCSUsrMsg_ReportHit")
	proto.RegisterType((*CCSUsrMsg_KillCam)(nil), "CCSUsrMsg_KillCam")
	proto.RegisterType((*CCSUsrMsg_DesiredTimescale)(nil), "CCSUsrMsg_DesiredTimescale")
	proto.RegisterType((*CCSUsrMsg_CurrentTimescale)(nil), "CCSUsrMsg_CurrentTimescale")
	proto.RegisterType((*CCSUsrMsg_AchievementEvent)(nil), "CCSUsrMsg_AchievementEvent")
	proto.RegisterType((*CCSUsrMsg_MatchEndConditions)(nil), "CCSUsrMsg_MatchEndConditions")
	proto.RegisterType((*CCSUsrMsg_PlayerStatsUpdate)(nil), "CCSUsrMsg_PlayerStatsUpdate")
	proto.RegisterType((*CCSUsrMsg_PlayerStatsUpdate_Stat)(nil), "CCSUsrMsg_PlayerStatsUpdate.Stat")
	proto.RegisterType((*CCSUsrMsg_DisplayInventory)(nil), "CCSUsrMsg_DisplayInventory")
	proto.RegisterType((*CCSUsrMsg_QuestProgress)(nil), "CCSUsrMsg_QuestProgress")
	proto.RegisterType((*CCSUsrMsg_ScoreLeaderboardData)(nil), "CCSUsrMsg_ScoreLeaderboardData")
	proto.RegisterType((*CCSUsrMsg_XRankGet)(nil), "CCSUsrMsg_XRankGet")
	proto.RegisterType((*CCSUsrMsg_XRankUpd)(nil), "CCSUsrMsg_XRankUpd")
	proto.RegisterType((*CCSUsrMsg_CallVoteFailed)(nil), "CCSUsrMsg_CallVoteFailed")
	proto.RegisterType((*CCSUsrMsg_VoteStart)(nil), "CCSUsrMsg_VoteStart")
	proto.RegisterType((*CCSUsrMsg_VotePass)(nil), "CCSUsrMsg_VotePass")
	proto.RegisterType((*CCSUsrMsg_VoteFailed)(nil), "CCSUsrMsg_VoteFailed")
	proto.RegisterType((*CCSUsrMsg_VoteSetup)(nil), "CCSUsrMsg_VoteSetup")
	proto.RegisterType((*CCSUsrMsg_SendLastKillerDamageToClient)(nil), "CCSUsrMsg_SendLastKillerDamageToClient")
	proto.RegisterType((*CCSUsrMsg_ServerRankUpdate)(nil), "CCSUsrMsg_ServerRankUpdate")
	proto.RegisterType((*CCSUsrMsg_ServerRankUpdate_RankUpdate)(nil), "CCSUsrMsg_ServerRankUpdate.RankUpdate")
	proto.RegisterType((*CCSUsrMsg_XpUpdate)(nil), "CCSUsrMsg_XpUpdate")
	proto.RegisterType((*CCSUsrMsg_ItemPickup)(nil), "CCSUsrMsg_ItemPickup")
	proto.RegisterType((*CCSUsrMsg_ShowMenu)(nil), "CCSUsrMsg_ShowMenu")
	proto.RegisterType((*CCSUsrMsg_BarTime)(nil), "CCSUsrMsg_BarTime")
	proto.RegisterType((*CCSUsrMsg_AmmoDenied)(nil), "CCSUsrMsg_AmmoDenied")
	proto.RegisterType((*CCSUsrMsg_MarkAchievement)(nil), "CCSUsrMsg_MarkAchievement")
	proto.RegisterType((*CCSUsrMsg_MatchStatsUpdate)(nil), "CCSUsrMsg_MatchStatsUpdate")
	proto.RegisterType((*CCSUsrMsg_ItemDrop)(nil), "CCSUsrMsg_ItemDrop")
	proto.RegisterType((*CCSUsrMsg_GlowPropTurnOff)(nil), "CCSUsrMsg_GlowPropTurnOff")
	proto.RegisterType((*CCSUsrMsg_RoundBackupFilenames)(nil), "CCSUsrMsg_RoundBackupFilenames")
	proto.RegisterType((*CCSUsrMsg_ResetHud)(nil), "CCSUsrMsg_ResetHud")
	proto.RegisterType((*CCSUsrMsg_GameTitle)(nil), "CCSUsrMsg_GameTitle")
	proto.RegisterType((*CCSUsrMsg_RequestState)(nil), "CCSUsrMsg_RequestState")
	proto.RegisterType((*CCSUsrMsg_StopSpectatorMode)(nil), "CCSUsrMsg_StopSpectatorMode")
	proto.RegisterType((*CCSUsrMsg_DisconnectToLobby)(nil), "CCSUsrMsg_DisconnectToLobby")
	proto.RegisterType((*CCSUsrMsg_WarmupHasEnded)(nil), "CCSUsrMsg_WarmupHasEnded")
	proto.RegisterType((*CCSUsrMsg_ClientInfo)(nil), "CCSUsrMsg_ClientInfo")
	proto.RegisterType((*CCSUsrMsg_ServerRankRevealAll)(nil), "CCSUsrMsg_ServerRankRevealAll")
	proto.RegisterEnum("ECstrike15UserMessages", ECstrike15UserMessages_name, ECstrike15UserMessages_value)
}
func (m *CCSUsrMsg_VGUIMenu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VGUIMenu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	if m.Show {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.Subkeys) > 0 {
		for _, msg := range m.Subkeys {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Str)))
	i += copy(dAtA[i:], m.Str)
	return i, nil
}

func (m *CCSUsrMsg_Geiger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Geiger) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Range))
	return i, nil
}

func (m *CCSUsrMsg_Train) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Train) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Train))
	return i, nil
}

func (m *CCSUsrMsg_HudText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_HudText) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *CCSUsrMsg_SayText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SayText) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntIdx))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	dAtA[i] = 0x18
	i++
	if m.Chat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x20
	i++
	if m.Textallchat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_SayText2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SayText2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntIdx))
	dAtA[i] = 0x10
	i++
	if m.Chat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.MsgName)))
	i += copy(dAtA[i:], m.MsgName)
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x28
	i++
	if m.Textallchat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_TextMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_TextMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MsgDst))
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CCSUsrMsg_HudMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_HudMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Channel))
	if m.Pos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Pos.Size()))
		n1, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Clr1 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Clr1.Size()))
		n2, err := m.Clr1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Clr2 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Clr2.Size()))
		n3, err := m.Clr2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Effect))
	dAtA[i] = 0x35
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.FadeInTime))))
	dAtA[i] = 0x3d
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.FadeOutTime))))
	dAtA[i] = 0x4d
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.HoldTime))))
	dAtA[i] = 0x55
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.FxTime))))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *CCSUsrMsg_Shake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Shake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Command))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.LocalAmplitude))))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.Frequency))))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.Duration))))
	return i, nil
}

func (m *CCSUsrMsg_Fade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Fade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Duration))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.HoldTime))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Flags))
	if m.Clr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Clr.Size()))
		n4, err := m.Clr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CCSUsrMsg_Rumble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Rumble) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Index))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Data))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Flags))
	return i, nil
}

func (m *CCSUsrMsg_CloseCaption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CloseCaption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Hash))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Duration))
	dAtA[i] = 0x18
	i++
	if m.FromPlayer {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_CloseCaptionDirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CloseCaptionDirect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Hash))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Duration))
	dAtA[i] = 0x18
	i++
	if m.FromPlayer {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_SendAudio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SendAudio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.RadioSound)))
	i += copy(dAtA[i:], m.RadioSound)
	return i, nil
}

func (m *CCSUsrMsg_RawAudio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RawAudio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Pitch))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.Duration))))
	dAtA[i] = 0x22
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.VoiceFilename)))
	i += copy(dAtA[i:], m.VoiceFilename)
	return i, nil
}

func (m *CCSUsrMsg_VoiceMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoiceMask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerMasks) > 0 {
		for _, msg := range m.PlayerMasks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	if m.PlayerModEnable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.GameRulesMask))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.BanMasks))
	return i, nil
}

func (m *CCSUsrMsg_Damage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Damage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Amount))
	if m.InflictorWorldPos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.InflictorWorldPos.Size()))
		n5, err := m.InflictorWorldPos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.VictimEntindex))
	return i, nil
}

func (m *CCSUsrMsg_RadioText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RadioText) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MsgDst))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Client))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.MsgName)))
	i += copy(dAtA[i:], m.MsgName)
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CCSUsrMsg_HintText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_HintText) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *CCSUsrMsg_KeyHintText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_KeyHintText) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hints) > 0 {
		for _, s := range m.Hints {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.NewUpdate {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.EntityUpdates) > 0 {
		for _, msg := range m.EntityUpdates {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntityIdx))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ClassId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.OriginX))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.OriginY))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.OriginZ))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.AngleY))
	dAtA[i] = 0x38
	i++
	if m.Defuser {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x40
	i++
	if m.PlayerHasDefuser {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x48
	i++
	if m.PlayerHasC4 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_SendPlayerItemDrops) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SendPlayerItemDrops) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityUpdates) > 0 {
		for _, msg := range m.EntityUpdates {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CCSUsrMsg_SendPlayerItemFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SendPlayerItemFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iteminfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Iteminfo.Size()))
		n6, err := m.Iteminfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entindex))
	return i, nil
}

func (m *CCSUsrMsg_ReloadEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ReloadEffect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Actanim))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.OriginX))))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.OriginY))))
	dAtA[i] = 0x2d
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.OriginZ))))
	return i, nil
}

func (m *CCSUsrMsg_AdjustMoney) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_AdjustMoney) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Amount))
	return i, nil
}

func (m *CCSUsrMsg_ReportHit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ReportHit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xd
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.PosX))))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.PosY))))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.PosZ))))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.Timestamp))))
	return i, nil
}

func (m *CCSUsrMsg_KillCam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_KillCam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ObsMode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.FirstTarget))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.SecondTarget))
	return i, nil
}

func (m *CCSUsrMsg_DesiredTimescale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_DesiredTimescale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xd
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.DesiredTimescale))))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.DurationRealtimeSec))))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.InterpolatorType))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.StartBlendTime))))
	return i, nil
}

func (m *CCSUsrMsg_CurrentTimescale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CurrentTimescale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xd
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.CurTimescale))))
	return i, nil
}

func (m *CCSUsrMsg_AchievementEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_AchievementEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Achievement))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Count))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *CCSUsrMsg_MatchEndConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_MatchEndConditions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Fraglimit))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MpMaxrounds))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MpWinlimit))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MpTimelimit))
	return i, nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Version))
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.UserId))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Crc))
	return i, nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Idx))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Delta))
	return i, nil
}

func (m *CCSUsrMsg_DisplayInventory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_DisplayInventory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Display {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.UserId))
	return i, nil
}

func (m *CCSUsrMsg_QuestProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_QuestProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.QuestId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NormalPoints))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.BonusPoints))
	dAtA[i] = 0x20
	i++
	if m.IsEventQuest {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_ScoreLeaderboardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ScoreLeaderboardData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Data.Size()))
		n7, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CCSUsrMsg_XRankGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_XRankGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ModeIdx))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Controller))
	return i, nil
}

func (m *CCSUsrMsg_XRankUpd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_XRankUpd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ModeIdx))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Controller))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Ranking))
	return i, nil
}

func (m *CCSUsrMsg_CallVoteFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CallVoteFailed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Reason))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Time))
	return i, nil
}

func (m *CCSUsrMsg_VoteStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoteStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Team))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntIdx))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.VoteType))
	dAtA[i] = 0x22
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.DispStr)))
	i += copy(dAtA[i:], m.DispStr)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.DetailsStr)))
	i += copy(dAtA[i:], m.DetailsStr)
	dAtA[i] = 0x32
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.OtherTeamStr)))
	i += copy(dAtA[i:], m.OtherTeamStr)
	dAtA[i] = 0x38
	i++
	if m.IsYesNoVote {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_VotePass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VotePass) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Team))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.VoteType))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.DispStr)))
	i += copy(dAtA[i:], m.DispStr)
	dAtA[i] = 0x22
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.DetailsStr)))
	i += copy(dAtA[i:], m.DetailsStr)
	return i, nil
}

func (m *CCSUsrMsg_VoteFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoteFailed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Team))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Reason))
	return i, nil
}

func (m *CCSUsrMsg_VoteSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoteSetup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PotentialIssues) > 0 {
		for _, s := range m.PotentialIssues {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NumHitsGiven))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.DamageGiven))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NumHitsTaken))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.DamageTaken))
	return i, nil
}

func (m *CCSUsrMsg_ServerRankUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ServerRankUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RankUpdate) > 0 {
		for _, msg := range m.RankUpdate {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.RankOld))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.RankNew))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NumWins))
	dAtA[i] = 0x2d
	i++
	i = encodeFixed32Cstrike15Usermessages(dAtA, i, uint32(math.Float32bits(float32(m.RankChange))))
	return i, nil
}

func (m *CCSUsrMsg_XpUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_XpUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *CCSUsrMsg_ItemPickup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ItemPickup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Item)))
	i += copy(dAtA[i:], m.Item)
	return i, nil
}

func (m *CCSUsrMsg_ShowMenu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ShowMenu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.BitsValidSlots))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.DisplayTime))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.MenuString)))
	i += copy(dAtA[i:], m.MenuString)
	return i, nil
}

func (m *CCSUsrMsg_BarTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_BarTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Time)))
	i += copy(dAtA[i:], m.Time)
	return i, nil
}

func (m *CCSUsrMsg_AmmoDenied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_AmmoDenied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.AmmoIdx))
	return i, nil
}

func (m *CCSUsrMsg_MarkAchievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_MarkAchievement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Achievement)))
	i += copy(dAtA[i:], m.Achievement)
	return i, nil
}

func (m *CCSUsrMsg_MatchStatsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_MatchStatsUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Update)))
	i += copy(dAtA[i:], m.Update)
	return i, nil
}

func (m *CCSUsrMsg_ItemDrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ItemDrop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Itemid))
	dAtA[i] = 0x10
	i++
	if m.Death {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_GlowPropTurnOff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_GlowPropTurnOff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	return i, nil
}

func (m *CCSUsrMsg_RoundBackupFilenames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RoundBackupFilenames) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Count))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Index))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Filename)))
	i += copy(dAtA[i:], m.Filename)
	dAtA[i] = 0x22
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Nicename)))
	i += copy(dAtA[i:], m.Nicename)
	return i, nil
}

func (m *CCSUsrMsg_ResetHud) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ResetHud) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Reset_ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CCSUsrMsg_GameTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_GameTitle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	return i, nil
}

func (m *CCSUsrMsg_RequestState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RequestState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	return i, nil
}

func (m *CCSUsrMsg_StopSpectatorMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_StopSpectatorMode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	return i, nil
}

func (m *CCSUsrMsg_DisconnectToLobby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_DisconnectToLobby) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	return i, nil
}

func (m *CCSUsrMsg_WarmupHasEnded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_WarmupHasEnded) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	return i, nil
}

func (m *CCSUsrMsg_ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	return i, nil
}

func (m *CCSUsrMsg_ServerRankRevealAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ServerRankRevealAll) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.SecondsTillShutdown))
	return i, nil
}

func encodeFixed64Cstrike15Usermessages(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Cstrike15Usermessages(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCstrike15Usermessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CCSUsrMsg_VGUIMenu) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	n += 2
	if len(m.Subkeys) > 0 {
		for _, e := range m.Subkeys {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.Str)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_Geiger) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Range))
	return n
}

func (m *CCSUsrMsg_Train) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Train))
	return n
}

func (m *CCSUsrMsg_HudText) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_SayText) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.EntIdx))
	l = len(m.Text)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	n += 2
	n += 2
	return n
}

func (m *CCSUsrMsg_SayText2) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.EntIdx))
	n += 2
	l = len(m.MsgName)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *CCSUsrMsg_TextMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.MsgDst))
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_HudMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Channel))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	if m.Clr1 != nil {
		l = m.Clr1.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	if m.Clr2 != nil {
		l = m.Clr2.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.Effect))
	n += 5
	n += 5
	n += 5
	n += 5
	l = len(m.Text)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_Shake) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Command))
	n += 5
	n += 5
	n += 5
	return n
}

func (m *CCSUsrMsg_Fade) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Duration))
	n += 1 + sovCstrike15Usermessages(uint64(m.HoldTime))
	n += 1 + sovCstrike15Usermessages(uint64(m.Flags))
	if m.Clr != nil {
		l = m.Clr.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func (m *CCSUsrMsg_Rumble) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Index))
	n += 1 + sovCstrike15Usermessages(uint64(m.Data))
	n += 1 + sovCstrike15Usermessages(uint64(m.Flags))
	return n
}

func (m *CCSUsrMsg_CloseCaption) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Hash))
	n += 1 + sovCstrike15Usermessages(uint64(m.Duration))
	n += 2
	return n
}

func (m *CCSUsrMsg_CloseCaptionDirect) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Hash))
	n += 1 + sovCstrike15Usermessages(uint64(m.Duration))
	n += 2
	return n
}

func (m *CCSUsrMsg_SendAudio) Size() (n int) {
	var l int
	_ = l
	l = len(m.RadioSound)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_RawAudio) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Pitch))
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	n += 5
	l = len(m.VoiceFilename)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_VoiceMask) Size() (n int) {
	var l int
	_ = l
	if len(m.PlayerMasks) > 0 {
		for _, e := range m.PlayerMasks {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.GameRulesMask))
	n += 1 + sovCstrike15Usermessages(uint64(m.BanMasks))
	return n
}

func (m *CCSUsrMsg_Damage) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Amount))
	if m.InflictorWorldPos != nil {
		l = m.InflictorWorldPos.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.VictimEntindex))
	return n
}

func (m *CCSUsrMsg_RadioText) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.MsgDst))
	n += 1 + sovCstrike15Usermessages(uint64(m.Client))
	l = len(m.MsgName)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_HintText) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_KeyHintText) Size() (n int) {
	var l int
	_ = l
	if len(m.Hints) > 0 {
		for _, s := range m.Hints {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) Size() (n int) {
	var l int
	_ = l
	n += 2
	if len(m.EntityUpdates) > 0 {
		for _, e := range m.EntityUpdates {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.EntityIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.ClassId))
	n += 1 + sovCstrike15Usermessages(uint64(m.OriginX))
	n += 1 + sovCstrike15Usermessages(uint64(m.OriginY))
	n += 1 + sovCstrike15Usermessages(uint64(m.OriginZ))
	n += 1 + sovCstrike15Usermessages(uint64(m.AngleY))
	n += 2
	n += 2
	n += 2
	return n
}

func (m *CCSUsrMsg_SendPlayerItemDrops) Size() (n int) {
	var l int
	_ = l
	if len(m.EntityUpdates) > 0 {
		for _, e := range m.EntityUpdates {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_SendPlayerItemFound) Size() (n int) {
	var l int
	_ = l
	if m.Iteminfo != nil {
		l = m.Iteminfo.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.Entindex))
	return n
}

func (m *CCSUsrMsg_ReloadEffect) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	n += 1 + sovCstrike15Usermessages(uint64(m.Actanim))
	n += 5
	n += 5
	n += 5
	return n
}

func (m *CCSUsrMsg_AdjustMoney) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Amount))
	return n
}

func (m *CCSUsrMsg_ReportHit) Size() (n int) {
	var l int
	_ = l
	n += 5
	n += 5
	n += 5
	n += 5
	return n
}

func (m *CCSUsrMsg_KillCam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.ObsMode))
	n += 1 + sovCstrike15Usermessages(uint64(m.FirstTarget))
	n += 1 + sovCstrike15Usermessages(uint64(m.SecondTarget))
	return n
}

func (m *CCSUsrMsg_DesiredTimescale) Size() (n int) {
	var l int
	_ = l
	n += 5
	n += 5
	n += 1 + sovCstrike15Usermessages(uint64(m.InterpolatorType))
	n += 5
	return n
}

func (m *CCSUsrMsg_CurrentTimescale) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}

func (m *CCSUsrMsg_AchievementEvent) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Achievement))
	n += 1 + sovCstrike15Usermessages(uint64(m.Count))
	n += 1 + sovCstrike15Usermessages(uint64(m.UserId))
	return n
}

func (m *CCSUsrMsg_MatchEndConditions) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Fraglimit))
	n += 1 + sovCstrike15Usermessages(uint64(m.MpMaxrounds))
	n += 1 + sovCstrike15Usermessages(uint64(m.MpWinlimit))
	n += 1 + sovCstrike15Usermessages(uint64(m.MpTimelimit))
	return n
}

func (m *CCSUsrMsg_PlayerStatsUpdate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Version))
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.UserId))
	n += 1 + sovCstrike15Usermessages(uint64(m.Crc))
	return n
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Idx))
	n += 1 + sovCstrike15Usermessages(uint64(m.Delta))
	return n
}

func (m *CCSUsrMsg_DisplayInventory) Size() (n int) {
	var l int
	_ = l
	n += 2
	n += 1 + sovCstrike15Usermessages(uint64(m.UserId))
	return n
}

func (m *CCSUsrMsg_QuestProgress) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.QuestId))
	n += 1 + sovCstrike15Usermessages(uint64(m.NormalPoints))
	n += 1 + sovCstrike15Usermessages(uint64(m.BonusPoints))
	n += 2
	return n
}

func (m *CCSUsrMsg_ScoreLeaderboardData) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func (m *CCSUsrMsg_XRankGet) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.ModeIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.Controller))
	return n
}

func (m *CCSUsrMsg_XRankUpd) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.ModeIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.Controller))
	n += 1 + sovCstrike15Usermessages(uint64(m.Ranking))
	return n
}

func (m *CCSUsrMsg_CallVoteFailed) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Reason))
	n += 1 + sovCstrike15Usermessages(uint64(m.Time))
	return n
}

func (m *CCSUsrMsg_VoteStart) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Team))
	n += 1 + sovCstrike15Usermessages(uint64(m.EntIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.VoteType))
	l = len(m.DispStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.DetailsStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.OtherTeamStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	n += 2
	return n
}

func (m *CCSUsrMsg_VotePass) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Team))
	n += 1 + sovCstrike15Usermessages(uint64(m.VoteType))
	l = len(m.DispStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.DetailsStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_VoteFailed) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Team))
	n += 1 + sovCstrike15Usermessages(uint64(m.Reason))
	return n
}

func (m *CCSUsrMsg_VoteSetup) Size() (n int) {
	var l int
	_ = l
	if len(m.PotentialIssues) > 0 {
		for _, s := range m.PotentialIssues {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.NumHitsGiven))
	n += 1 + sovCstrike15Usermessages(uint64(m.DamageGiven))
	n += 1 + sovCstrike15Usermessages(uint64(m.NumHitsTaken))
	n += 1 + sovCstrike15Usermessages(uint64(m.DamageTaken))
	return n
}

func (m *CCSUsrMsg_ServerRankUpdate) Size() (n int) {
	var l int
	_ = l
	if len(m.RankUpdate) > 0 {
		for _, e := range m.RankUpdate {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Usermessages(uint64(m.RankOld))
	n += 1 + sovCstrike15Usermessages(uint64(m.RankNew))
	n += 1 + sovCstrike15Usermessages(uint64(m.NumWins))
	n += 5
	return n
}

func (m *CCSUsrMsg_XpUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func (m *CCSUsrMsg_ItemPickup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Item)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_ShowMenu) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.BitsValidSlots))
	n += 1 + sovCstrike15Usermessages(uint64(m.DisplayTime))
	l = len(m.MenuString)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_BarTime) Size() (n int) {
	var l int
	_ = l
	l = len(m.Time)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_AmmoDenied) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.AmmoIdx))
	return n
}

func (m *CCSUsrMsg_MarkAchievement) Size() (n int) {
	var l int
	_ = l
	l = len(m.Achievement)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_MatchStatsUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Update)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_ItemDrop) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Itemid))
	n += 2
	return n
}

func (m *CCSUsrMsg_GlowPropTurnOff) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	return n
}

func (m *CCSUsrMsg_RoundBackupFilenames) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Count))
	n += 1 + sovCstrike15Usermessages(uint64(m.Index))
	l = len(m.Filename)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.Nicename)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_ResetHud) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}

func (m *CCSUsrMsg_GameTitle) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_RequestState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_StopSpectatorMode) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_DisconnectToLobby) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_WarmupHasEnded) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_ClientInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_ServerRankRevealAll) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.SecondsTillShutdown))
	return n
}

func sovCstrike15Usermessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCstrike15Usermessages(x uint64) (n int) {
	return sovCstrike15Usermessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CCSUsrMsg_VGUIMenu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VGUIMenu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VGUIMenu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Show = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subkeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subkeys = append(m.Subkeys, &CCSUsrMsg_VGUIMenu_Subkey{})
			if err := m.Subkeys[len(m.Subkeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VGUIMenu_Subkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Geiger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Geiger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Geiger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Train) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Train: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Train: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Train", wireType)
			}
			m.Train = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Train |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_HudText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_HudText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_HudText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SayText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SayText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SayText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntIdx", wireType)
			}
			m.EntIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Chat = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Textallchat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Textallchat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SayText2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SayText2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SayText2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntIdx", wireType)
			}
			m.EntIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Chat = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Textallchat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Textallchat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_TextMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_TextMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_TextMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDst", wireType)
			}
			m.MsgDst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgDst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_HudMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_HudMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_HudMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CMsgVector2D{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clr1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clr1 == nil {
				m.Clr1 = &CMsgRGBA{}
			}
			if err := m.Clr1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clr2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clr2 == nil {
				m.Clr2 = &CMsgRGBA{}
			}
			if err := m.Clr2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			m.Effect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Effect |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FadeInTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FadeInTime = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FadeOutTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FadeOutTime = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.HoldTime = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FxTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FxTime = float32(math.Float32frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Shake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Shake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Shake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAmplitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.LocalAmplitude = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Frequency = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Duration = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Fade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Fade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Fade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldTime", wireType)
			}
			m.HoldTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clr == nil {
				m.Clr = &CMsgRGBA{}
			}
			if err := m.Clr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Rumble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Rumble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Rumble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			m.Data = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Data |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CloseCaption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CloseCaption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CloseCaption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromPlayer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CloseCaptionDirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CloseCaptionDirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CloseCaptionDirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromPlayer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SendAudio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SendAudio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SendAudio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioSound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RadioSound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RawAudio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RawAudio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RawAudio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pitch", wireType)
			}
			m.Pitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pitch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Duration = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoiceFilename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoiceMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VoiceMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VoiceMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerMasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerMasks = append(m.PlayerMasks, &CCSUsrMsg_VoiceMask_PlayerMask{})
			if err := m.PlayerMasks[len(m.PlayerMasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerModEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerModEnable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoiceMask_PlayerMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRulesMask", wireType)
			}
			m.GameRulesMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameRulesMask |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanMasks", wireType)
			}
			m.BanMasks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanMasks |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Damage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Damage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Damage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflictorWorldPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InflictorWorldPos == nil {
				m.InflictorWorldPos = &CMsgVector{}
			}
			if err := m.InflictorWorldPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VictimEntindex", wireType)
			}
			m.VictimEntindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VictimEntindex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RadioText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RadioText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RadioText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDst", wireType)
			}
			m.MsgDst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgDst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			m.Client = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Client |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_HintText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_HintText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_HintText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_KeyHintText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_KeyHintText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_KeyHintText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hints = append(m.Hints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ProcessSpottedEntityUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ProcessSpottedEntityUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewUpdate = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityUpdates = append(m.EntityUpdates, &CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate{})
			if err := m.EntityUpdates[len(m.EntityUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpottedEntityUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpottedEntityUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityIdx", wireType)
			}
			m.EntityIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginX", wireType)
			}
			m.OriginX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginY", wireType)
			}
			m.OriginY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginZ", wireType)
			}
			m.OriginZ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginZ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AngleY", wireType)
			}
			m.AngleY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AngleY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defuser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Defuser = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerHasDefuser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerHasDefuser = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerHasC4", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerHasC4 = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SendPlayerItemDrops) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SendPlayerItemDrops: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SendPlayerItemDrops: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityUpdates = append(m.EntityUpdates, &CEconItemPreviewDataBlock{})
			if err := m.EntityUpdates[len(m.EntityUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SendPlayerItemFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SendPlayerItemFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SendPlayerItemFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iteminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iteminfo == nil {
				m.Iteminfo = &CEconItemPreviewDataBlock{}
			}
			if err := m.Iteminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entindex", wireType)
			}
			m.Entindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entindex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ReloadEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ReloadEffect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ReloadEffect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actanim", wireType)
			}
			m.Actanim = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Actanim |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.OriginX = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.OriginY = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.OriginZ = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_AdjustMoney) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_AdjustMoney: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_AdjustMoney: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ReportHit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ReportHit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ReportHit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosX = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosY = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.PosZ = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Timestamp = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_KillCam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_KillCam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_KillCam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObsMode", wireType)
			}
			m.ObsMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObsMode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTarget", wireType)
			}
			m.FirstTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstTarget |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondTarget", wireType)
			}
			m.SecondTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondTarget |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_DesiredTimescale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_DesiredTimescale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_DesiredTimescale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredTimescale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DesiredTimescale = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationRealtimeSec", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.DurationRealtimeSec = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterpolatorType", wireType)
			}
			m.InterpolatorType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterpolatorType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlendTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.StartBlendTime = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CurrentTimescale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CurrentTimescale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CurrentTimescale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurTimescale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.CurTimescale = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_AchievementEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_AchievementEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_AchievementEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			m.Achievement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Achievement |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_MatchEndConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_MatchEndConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_MatchEndConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fraglimit", wireType)
			}
			m.Fraglimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fraglimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpMaxrounds", wireType)
			}
			m.MpMaxrounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpMaxrounds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpWinlimit", wireType)
			}
			m.MpWinlimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpWinlimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpTimelimit", wireType)
			}
			m.MpTimelimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpTimelimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_PlayerStatsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_PlayerStatsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_PlayerStatsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &CCSUsrMsg_PlayerStatsUpdate_Stat{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc", wireType)
			}
			m.Crc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_DisplayInventory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_DisplayInventory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_DisplayInventory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Display = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_QuestProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_QuestProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_QuestProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestId", wireType)
			}
			m.QuestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalPoints", wireType)
			}
			m.NormalPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NormalPoints |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusPoints", wireType)
			}
			m.BonusPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BonusPoints |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEventQuest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEventQuest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ScoreLeaderboardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ScoreLeaderboardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ScoreLeaderboardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ScoreLeaderboardData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_XRankGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_XRankGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_XRankGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeIdx", wireType)
			}
			m.ModeIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			m.Controller = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Controller |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_XRankUpd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_XRankUpd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_XRankUpd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeIdx", wireType)
			}
			m.ModeIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			m.Controller = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Controller |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CallVoteFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CallVoteFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CallVoteFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoteStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntIdx", wireType)
			}
			m.EntIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteType", wireType)
			}
			m.VoteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailsStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailsStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherTeamStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherTeamStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsYesNoVote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsYesNoVote = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VotePass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VotePass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VotePass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteType", wireType)
			}
			m.VoteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailsStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailsStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoteFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoteSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PotentialIssues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PotentialIssues = append(m.PotentialIssues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SendLastKillerDamageToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SendLastKillerDamageToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumHitsGiven", wireType)
			}
			m.NumHitsGiven = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumHitsGiven |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageGiven", wireType)
			}
			m.DamageGiven = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageGiven |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumHitsTaken", wireType)
			}
			m.NumHitsTaken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumHitsTaken |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageTaken", wireType)
			}
			m.DamageTaken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageTaken |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ServerRankUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ServerRankUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ServerRankUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankUpdate = append(m.RankUpdate, &CCSUsrMsg_ServerRankUpdate_RankUpdate{})
			if err := m.RankUpdate[len(m.RankUpdate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankOld", wireType)
			}
			m.RankOld = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankOld |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankNew", wireType)
			}
			m.RankNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankNew |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumWins", wireType)
			}
			m.NumWins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumWins |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankChange", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.RankChange = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_XpUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_XpUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_XpUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ItemPickup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ItemPickup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ItemPickup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ShowMenu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ShowMenu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ShowMenu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitsValidSlots", wireType)
			}
			m.BitsValidSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitsValidSlots |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayTime", wireType)
			}
			m.DisplayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MenuString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_BarTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_BarTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_BarTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_AmmoDenied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_AmmoDenied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_AmmoDenied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmmoIdx", wireType)
			}
			m.AmmoIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmmoIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_MarkAchievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_MarkAchievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_MarkAchievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_MatchStatsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_MatchStatsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_MatchStatsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ItemDrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ItemDrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ItemDrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Death", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Death = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_GlowPropTurnOff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_GlowPropTurnOff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_GlowPropTurnOff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RoundBackupFilenames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RoundBackupFilenames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RoundBackupFilenames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nicename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nicename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ResetHud) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ResetHud: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ResetHud: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reset_ = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_GameTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_GameTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_GameTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RequestState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RequestState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RequestState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_StopSpectatorMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_StopSpectatorMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_StopSpectatorMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_DisconnectToLobby) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_DisconnectToLobby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_DisconnectToLobby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_WarmupHasEnded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_WarmupHasEnded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_WarmupHasEnded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ServerRankRevealAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ServerRankRevealAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ServerRankRevealAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsTillShutdown", wireType)
			}
			m.SecondsTillShutdown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsTillShutdown |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCstrike15Usermessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCstrike15Usermessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCstrike15Usermessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCstrike15Usermessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCstrike15Usermessages   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cstrike15_usermessages.proto", fileDescriptorCstrike15Usermessages) }

var fileDescriptorCstrike15Usermessages = []byte{
	// 3400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4f, 0x73, 0x24, 0x47,
	0x56, 0x77, 0x77, 0xeb, 0x6f, 0xb6, 0xa4, 0xc9, 0xa9, 0xf9, 0x63, 0x4d, 0x7b, 0x46, 0xa3, 0x29,
	0x7b, 0x67, 0x67, 0x0c, 0xd3, 0x78, 0xc4, 0xd8, 0xbb, 0xf6, 0x2e, 0xb0, 0x52, 0x4b, 0x23, 0x09,
	0x5b, 0x63, 0xd1, 0xad, 0x99, 0xf1, 0x78, 0x83, 0x28, 0x52, 0x55, 0xd9, 0xdd, 0x85, 0xaa, 0x32,
	0x6b, 0x33, 0xb3, 0x24, 0xf5, 0xee, 0x01, 0xb8, 0x11, 0x6c, 0x04, 0xb1, 0x07, 0x2e, 0x44, 0x2c,
	0x27, 0x22, 0x38, 0x72, 0x67, 0xf7, 0x0b, 0xf8, 0x48, 0x70, 0x25, 0x20, 0x08, 0x73, 0x82, 0xe0,
	0xc4, 0x27, 0x20, 0x5e, 0x66, 0x55, 0x57, 0x66, 0xb7, 0x24, 0x3b, 0x08, 0x82, 0x5b, 0xf7, 0xef,
	0xfd, 0x32, 0xf3, 0xe5, 0xcb, 0x97, 0x2f, 0xdf, 0x7b, 0x85, 0xee, 0x86, 0x52, 0x89, 0xf8, 0x84,
	0x3e, 0xfd, 0x30, 0xc8, 0x25, 0x15, 0x29, 0x95, 0x92, 0x0c, 0xa8, 0x6c, 0x67, 0x82, 0x2b, 0xde,
	0xba, 0xce, 0xa8, 0x9a, 0x80, 0x5a, 0xd5, 0x80, 0x41, 0xe8, 0xca, 0xfc, 0x5f, 0xd5, 0x90, 0xd7,
	0xe9, 0xf4, 0x5e, 0x4a, 0x71, 0x20, 0x07, 0xc1, 0xab, 0xdd, 0x97, 0xfb, 0x07, 0x94, 0xe5, 0xde,
	0x2a, 0x9a, 0x61, 0x24, 0xa5, 0xab, 0xb5, 0xf5, 0xda, 0xa3, 0xc5, 0xad, 0x99, 0xaf, 0xfe, 0xf5,
	0xfe, 0x5b, 0x5d, 0x8d, 0x80, 0x44, 0x0e, 0xf9, 0xd9, 0x6a, 0x7d, 0xbd, 0xf6, 0x68, 0xa1, 0x94,
	0x00, 0xe2, 0x3d, 0x43, 0xf3, 0x32, 0x3f, 0x3e, 0xa1, 0x23, 0xb9, 0xda, 0x58, 0x6f, 0x3c, 0x6a,
	0x6e, 0xb4, 0xda, 0xd3, 0x33, 0xb7, 0x7b, 0x9a, 0xd2, 0x2d, 0xa9, 0xad, 0x4f, 0xd0, 0x9c, 0x81,
	0xae, 0x58, 0xf3, 0x36, 0x6a, 0x48, 0x25, 0xf4, 0x92, 0xa5, 0x00, 0x00, 0xbf, 0x8d, 0x70, 0xb5,
	0xc2, 0x2e, 0x8d, 0x07, 0x54, 0x78, 0x2d, 0x34, 0x2b, 0x08, 0x1b, 0x98, 0x69, 0x66, 0x0b, 0xb6,
	0x81, 0xfc, 0x27, 0xe8, 0x5a, 0xc5, 0x3f, 0x12, 0x24, 0x66, 0x40, 0x57, 0xf0, 0xc3, 0xa5, 0x6b,
	0xc8, 0x7f, 0x82, 0xae, 0x57, 0xf4, 0xbd, 0x3c, 0x3a, 0xa2, 0xe7, 0x0a, 0xb4, 0x54, 0xf4, 0x5c,
	0xb9, 0x5a, 0x02, 0xe2, 0xff, 0x65, 0xcd, 0xe6, 0xf7, 0xc8, 0x48, 0xf3, 0xef, 0xa1, 0x79, 0xca,
	0x54, 0x10, 0x47, 0xe7, 0xce, 0x12, 0x73, 0x94, 0xa9, 0xfd, 0xe8, 0x7c, 0x3c, 0x5d, 0x7d, 0x72,
	0x3a, 0x90, 0x84, 0x43, 0xa2, 0x56, 0x1b, 0xb6, 0xa1, 0x01, 0xf1, 0x1e, 0xa2, 0x26, 0x30, 0x48,
	0x92, 0x68, 0xc2, 0x8c, 0x45, 0xb0, 0x05, 0xfe, 0xdf, 0x3b, 0x67, 0x5b, 0x28, 0xb4, 0xf1, 0x2d,
	0x34, 0xd2, 0xd3, 0xd6, 0xa7, 0xd6, 0xbd, 0x8f, 0x16, 0x52, 0x39, 0x08, 0xf4, 0x21, 0x35, 0x2c,
	0x7d, 0xe7, 0x53, 0x39, 0x78, 0x61, 0xce, 0x69, 0x2e, 0x23, 0x82, 0xa4, 0x72, 0x75, 0x66, 0xbd,
	0xf1, 0x68, 0xb1, 0x5b, 0xfc, 0x9b, 0x54, 0x78, 0xf6, 0x32, 0x85, 0x7f, 0xdf, 0x36, 0x20, 0x28,
	0x7b, 0x20, 0x07, 0xa0, 0x2e, 0xac, 0x1a, 0x49, 0xe5, 0xaa, 0x9b, 0xca, 0xc1, 0xb6, 0x54, 0xd6,
	0x9a, 0x0d, 0x7b, 0x4d, 0xff, 0x5f, 0xea, 0xb6, 0x73, 0xec, 0xe5, 0x11, 0xcc, 0xb5, 0x86, 0xe6,
	0xc3, 0x21, 0x61, 0x8c, 0x26, 0xce, 0x5c, 0x25, 0xe8, 0xdd, 0x47, 0x8d, 0x8c, 0x4b, 0xbd, 0xf5,
	0xe6, 0xc6, 0x72, 0xbb, 0x73, 0x20, 0x07, 0xaf, 0x68, 0xa8, 0xb8, 0xd8, 0xd8, 0xee, 0x82, 0xc4,
	0xbb, 0x87, 0x66, 0xc2, 0x44, 0x3c, 0xd5, 0xdb, 0x6f, 0x6e, 0x2c, 0x6a, 0x46, 0x77, 0x77, 0x6b,
	0xb3, 0xab, 0xe1, 0x42, 0xbc, 0xa1, 0x8f, 0x64, 0x4a, 0xbc, 0xe1, 0xdd, 0x45, 0x73, 0xb4, 0xdf,
	0xa7, 0xa1, 0x31, 0x41, 0x65, 0x78, 0x8d, 0x79, 0x0f, 0xd1, 0x52, 0x9f, 0x44, 0x34, 0x88, 0x59,
	0xa0, 0xe2, 0x94, 0xae, 0xce, 0xad, 0xd7, 0x1e, 0xd5, 0x0b, 0x0e, 0x02, 0xc9, 0x3e, 0x3b, 0x8a,
	0x53, 0xea, 0x3d, 0x42, 0xcb, 0x9a, 0xc7, 0x73, 0x65, 0x88, 0xf3, 0x16, 0xb1, 0x09, 0xa2, 0xcf,
	0x73, 0xa5, 0x99, 0x0f, 0xd0, 0xe2, 0x90, 0x27, 0x91, 0x61, 0x2d, 0x5a, 0xac, 0x05, 0x80, 0x35,
	0xe5, 0x1e, 0x9a, 0xef, 0x9f, 0x1b, 0x02, 0xb2, 0x08, 0x73, 0xfd, 0x73, 0x2d, 0x2e, 0xdd, 0xb3,
	0x39, 0xe5, 0xed, 0x7f, 0x57, 0xb3, 0x2f, 0x53, 0x6f, 0x48, 0x4e, 0xa8, 0x36, 0x2f, 0x4f, 0x53,
	0xc2, 0xa2, 0x09, 0xf3, 0x1a, 0xd0, 0x7b, 0x82, 0xae, 0x25, 0x3c, 0x24, 0x49, 0x40, 0xd2, 0x2c,
	0x89, 0x55, 0x1e, 0x51, 0x6d, 0xea, 0x72, 0xd1, 0x15, 0x2d, 0xdc, 0x2c, 0x65, 0x9e, 0x8f, 0x16,
	0xfb, 0x82, 0xfe, 0x24, 0xa7, 0x2c, 0x1c, 0x69, 0x8b, 0x97, 0xc4, 0x0a, 0xf6, 0xd6, 0xd1, 0x42,
	0x94, 0x0b, 0xa2, 0x62, 0xce, 0xb4, 0xd5, 0xc7, 0x3b, 0x2c, 0x51, 0xb8, 0x96, 0x2b, 0x95, 0xa2,
	0xcf, 0x49, 0x44, 0x9d, 0x41, 0xb6, 0xa2, 0x63, 0xd4, 0xb5, 0x5c, 0xdd, 0xa6, 0x8c, 0x2d, 0xd7,
	0x42, 0xb3, 0xfd, 0x84, 0x0c, 0xa4, 0xd6, 0x6c, 0x1c, 0x39, 0x34, 0xe4, 0xbd, 0x83, 0x1a, 0x61,
	0x22, 0xa6, 0xdd, 0x00, 0x50, 0x3f, 0xb2, 0x1d, 0xb3, 0x9b, 0xa7, 0xc7, 0x89, 0x9e, 0x2c, 0x66,
	0x11, 0x75, 0x6f, 0xa4, 0x81, 0xe0, 0x0c, 0x22, 0xa2, 0x88, 0xa3, 0x86, 0x46, 0xae, 0x52, 0xc1,
	0xff, 0x19, 0xba, 0x5d, 0xad, 0xd2, 0x49, 0xb8, 0xa4, 0x1d, 0x92, 0xe9, 0xbd, 0xad, 0xa2, 0x99,
	0x21, 0x91, 0x43, 0xbd, 0xd4, 0x72, 0x39, 0x1f, 0x20, 0x8e, 0x5d, 0xea, 0x17, 0xda, 0xe5, 0x3b,
	0xa8, 0xd9, 0x17, 0x3c, 0x0d, 0xb2, 0x84, 0x8c, 0xa8, 0x70, 0x62, 0x13, 0x02, 0xc1, 0xa1, 0xc6,
	0xfd, 0x3f, 0xab, 0xa1, 0xbb, 0x17, 0xaf, 0xbe, 0x1d, 0x0b, 0xf0, 0xf5, 0xff, 0x07, 0x1d, 0x7e,
	0x88, 0x6e, 0x58, 0xfe, 0x49, 0x59, 0xb4, 0x99, 0x47, 0x31, 0x87, 0xd1, 0x82, 0x44, 0x31, 0x0f,
	0x24, 0xcf, 0x0b, 0x3f, 0x2d, 0x1d, 0x1b, 0x69, 0x41, 0x0f, 0x70, 0xff, 0x6f, 0x9c, 0xd8, 0xd9,
	0x25, 0x67, 0x66, 0x74, 0x0b, 0xcd, 0x66, 0xb1, 0x0a, 0x87, 0xee, 0x39, 0x69, 0x48, 0xdf, 0x6e,
	0xa6, 0x20, 0xac, 0xd6, 0x27, 0xc2, 0x6a, 0x1c, 0x9d, 0x3b, 0xfb, 0x6a, 0x5c, 0xe4, 0xa8, 0xde,
	0x6f, 0xa0, 0x95, 0x53, 0x1e, 0x87, 0x34, 0xe8, 0xc7, 0x09, 0xd5, 0x41, 0x76, 0xc6, 0x52, 0x6e,
	0x59, 0xcb, 0x9e, 0x17, 0x22, 0xff, 0x3f, 0x6b, 0xf6, 0xf6, 0x5e, 0x81, 0xec, 0x80, 0xc8, 0x13,
	0x6f, 0x0b, 0x2d, 0x19, 0xbb, 0x04, 0x29, 0x91, 0x27, 0x72, 0xb5, 0xa6, 0x5f, 0xe2, 0xfb, 0xed,
	0x0b, 0xb8, 0x6d, 0x63, 0x28, 0xf8, 0xd9, 0x6d, 0x66, 0xe3, 0xdf, 0xd2, 0xfb, 0x00, 0x5d, 0x2f,
	0xe7, 0xe0, 0x51, 0x40, 0x19, 0x39, 0x4e, 0xa8, 0xf3, 0x1c, 0x5c, 0x2b, 0xd8, 0x3c, 0xda, 0xd1,
	0xc2, 0xd6, 0x1f, 0x22, 0x54, 0x4d, 0xe6, 0xfd, 0x26, 0xba, 0x36, 0x20, 0x29, 0x0d, 0x44, 0x9e,
	0x50, 0xa9, 0xf5, 0x70, 0xcc, 0xb5, 0x0c, 0xc2, 0x2e, 0xc8, 0x34, 0xfb, 0x01, 0x5a, 0x3c, 0x26,
	0xac, 0x50, 0xd7, 0x39, 0xf1, 0x63, 0xc2, 0xb4, 0x42, 0xfe, 0x2f, 0x6b, 0xf6, 0x95, 0xd9, 0x26,
	0x29, 0x19, 0x50, 0x30, 0x37, 0x49, 0x79, 0xce, 0x26, 0x9e, 0x05, 0x83, 0x79, 0x3f, 0x40, 0x37,
	0x62, 0xd6, 0x4f, 0x62, 0x08, 0xde, 0xc1, 0x19, 0x17, 0x49, 0x14, 0x54, 0x91, 0xbd, 0x69, 0x45,
	0xf6, 0xee, 0xf5, 0x31, 0xef, 0x35, 0xd0, 0x0e, 0xb9, 0x84, 0x38, 0x75, 0x1a, 0x87, 0x2a, 0x4e,
	0x03, 0x38, 0x3c, 0x7d, 0x2f, 0xed, 0x1b, 0xb6, 0x62, 0x84, 0x3b, 0x85, 0xcc, 0xff, 0xb9, 0x73,
	0x16, 0x5d, 0x70, 0xa2, 0xf2, 0xe9, 0xbf, 0xea, 0xe5, 0xba, 0x8b, 0xe6, 0xc2, 0x24, 0xa6, 0x4c,
	0xb9, 0xfe, 0x62, 0xb0, 0xff, 0xf5, 0x63, 0xeb, 0xb7, 0x6d, 0xc7, 0xdd, 0x8b, 0x99, 0xfa, 0x86,
	0xb4, 0xe5, 0x09, 0xba, 0x55, 0xf1, 0x3f, 0xa5, 0xa3, 0xf1, 0x90, 0x9b, 0x68, 0x76, 0x18, 0x33,
	0x65, 0x7c, 0x68, 0xb1, 0x6b, 0xfe, 0xf8, 0x3f, 0x9f, 0x41, 0xef, 0x55, 0xfc, 0x43, 0xc1, 0x43,
	0x2a, 0x65, 0x2f, 0xe3, 0x4a, 0xd1, 0x08, 0x2c, 0xa2, 0x46, 0x2f, 0xb3, 0x88, 0x28, 0xea, 0xbd,
	0x8b, 0x10, 0xa3, 0x67, 0x41, 0xae, 0xff, 0xe9, 0x75, 0x4b, 0xf7, 0x59, 0x64, 0xf4, 0xac, 0x20,
	0xfd, 0x11, 0x5a, 0xa1, 0x7a, 0x50, 0xc1, 0x83, 0x13, 0x02, 0x87, 0xfd, 0xb8, 0xfd, 0x6d, 0xd6,
	0x68, 0x5f, 0x80, 0x75, 0x97, 0xa9, 0xf5, 0x4f, 0xb6, 0xfe, 0xb9, 0x8e, 0x6e, 0x5c, 0xa2, 0x5e,
	0xb1, 0xf2, 0x64, 0x22, 0xb4, 0x68, 0x70, 0xc8, 0x85, 0xee, 0xa3, 0x85, 0x30, 0x21, 0x52, 0x06,
	0x71, 0xe4, 0x1c, 0xd2, 0xbc, 0x46, 0xf7, 0x23, 0x20, 0x70, 0x11, 0x0f, 0x62, 0x16, 0xb8, 0x2e,
	0x32, 0x6f, 0xd0, 0x2f, 0x2c, 0xc2, 0x48, 0x5f, 0xe7, 0x09, 0xc2, 0x1b, 0x8b, 0xf0, 0x53, 0x27,
	0x2b, 0x28, 0x08, 0x5f, 0x82, 0x17, 0x11, 0x36, 0x48, 0x68, 0x30, 0xd2, 0x19, 0x41, 0xe5, 0xe8,
	0x00, 0xbe, 0x81, 0x37, 0x37, 0xa2, 0x7d, 0x28, 0x04, 0x74, 0x1e, 0x50, 0xda, 0xb8, 0x04, 0xbd,
	0x0d, 0xe4, 0x15, 0x97, 0x79, 0x48, 0x64, 0x50, 0x52, 0x17, 0x2c, 0x2a, 0x36, 0xf2, 0x3d, 0x22,
	0xb7, 0x8b, 0x31, 0x8f, 0xd0, 0xb2, 0x35, 0x26, 0x7c, 0xa6, 0x73, 0x87, 0x71, 0xc6, 0x36, 0xa6,
	0x77, 0x9e, 0xf9, 0xc7, 0xe8, 0x9e, 0x1b, 0x64, 0x4d, 0x18, 0xd8, 0x57, 0x34, 0xdd, 0x16, 0x3c,
	0x93, 0xde, 0xe6, 0xd4, 0x01, 0xd7, 0xca, 0xda, 0x60, 0x27, 0xe4, 0x0c, 0x88, 0x87, 0x82, 0x9e,
	0xc6, 0xf4, 0x6c, 0x9b, 0x28, 0xb2, 0x95, 0xf0, 0xf0, 0x64, 0xe2, 0x04, 0xfd, 0xd1, 0xe5, 0x6b,
	0x3c, 0x87, 0x58, 0xed, 0x7d, 0x84, 0x16, 0x62, 0x45, 0xd3, 0x98, 0xf5, 0xb9, 0x3e, 0xc8, 0xab,
	0x67, 0x1f, 0x73, 0x21, 0x24, 0x8f, 0xef, 0xb7, 0x13, 0x78, 0x4a, 0xd4, 0xff, 0x87, 0x9a, 0xfd,
	0x8a, 0x76, 0x69, 0xc2, 0x49, 0xb4, 0x63, 0xb2, 0xb5, 0x2a, 0xda, 0xd7, 0x2e, 0x88, 0xf6, 0x6b,
	0x68, 0x9e, 0x84, 0x8a, 0xb0, 0x38, 0x75, 0xfd, 0xa6, 0x00, 0xa7, 0xfc, 0xa6, 0xfe, 0x4d, 0x7e,
	0x53, 0xff, 0x26, 0xbf, 0x99, 0x20, 0x7c, 0xe9, 0x7f, 0x68, 0xdf, 0xeb, 0xcd, 0xe8, 0x8f, 0x73,
	0xa9, 0x0e, 0x38, 0xa3, 0xa3, 0xab, 0x03, 0xa7, 0xff, 0x17, 0x6e, 0x30, 0xa3, 0x19, 0x17, 0x6a,
	0x2f, 0x56, 0xde, 0x1d, 0x34, 0x9b, 0x71, 0x19, 0x98, 0xed, 0x96, 0x8b, 0xcd, 0x64, 0x5c, 0x7e,
	0x51, 0x8a, 0x46, 0x4e, 0x32, 0x07, 0xa2, 0x37, 0xa5, 0xe8, 0xa7, 0xce, 0x26, 0x41, 0xf4, 0x25,
	0x64, 0x77, 0x90, 0x5d, 0x49, 0x45, 0xd2, 0xcc, 0xd9, 0x62, 0x05, 0xfb, 0x7f, 0xee, 0x94, 0x54,
	0x9f, 0xc6, 0x49, 0xd2, 0x21, 0xc6, 0x78, 0xc7, 0x12, 0x1e, 0x27, 0xb7, 0xca, 0x9b, 0xe7, 0xc7,
	0xf2, 0x80, 0x47, 0xd4, 0xfb, 0x2e, 0x5a, 0xea, 0xc7, 0x42, 0xaa, 0x40, 0x11, 0x31, 0xa0, 0x6e,
	0x7c, 0x6d, 0x6a, 0xc9, 0x91, 0x16, 0x78, 0x8f, 0xd1, 0xb2, 0xa4, 0x21, 0x67, 0x51, 0xc9, 0xb4,
	0xef, 0xf0, 0x92, 0x11, 0x19, 0xaa, 0xff, 0x5f, 0x35, 0xd4, 0xb2, 0xde, 0x20, 0x2a, 0x63, 0x41,
	0x75, 0x22, 0x28, 0x43, 0x92, 0x50, 0xef, 0x29, 0xba, 0x1e, 0x19, 0x4c, 0xe7, 0x8c, 0x1a, 0x74,
	0x4c, 0x85, 0xa3, 0xc9, 0x21, 0xdf, 0x47, 0xb7, 0xca, 0xb7, 0x3f, 0x10, 0x94, 0x24, 0x30, 0x2e,
	0x90, 0x34, 0x74, 0xcc, 0x78, 0xa3, 0xa4, 0x74, 0x0b, 0x46, 0x8f, 0x86, 0xb0, 0x58, 0xcc, 0x14,
	0x15, 0x19, 0x4f, 0x08, 0xbc, 0x6f, 0x6a, 0x94, 0x51, 0x47, 0x75, 0x6c, 0x8b, 0x8f, 0x46, 0x19,
	0xf5, 0xda, 0x08, 0x4b, 0x45, 0x84, 0x0a, 0x8e, 0x13, 0xca, 0x8a, 0xbc, 0xd6, 0x36, 0xfa, 0x8a,
	0x96, 0x6e, 0x81, 0x10, 0x34, 0xf4, 0x77, 0xed, 0xdd, 0x76, 0x72, 0x21, 0x28, 0x53, 0x95, 0xea,
	0x8f, 0xd1, 0x72, 0x98, 0x8b, 0x4b, 0x76, 0xba, 0x14, 0xe6, 0x62, 0x4c, 0xf5, 0xff, 0xc4, 0x9e,
	0x68, 0x33, 0x1c, 0xc6, 0xf4, 0x94, 0xa6, 0x94, 0xa9, 0x9d, 0x53, 0x78, 0xe5, 0x1e, 0xa2, 0x26,
	0xa9, 0x30, 0xe7, 0x34, 0x6d, 0x01, 0xe4, 0x5d, 0xa1, 0x76, 0x59, 0xfb, 0x28, 0x0d, 0x04, 0x01,
	0x12, 0xa2, 0x16, 0xc4, 0x68, 0xdb, 0x06, 0x73, 0x00, 0xee, 0x47, 0xfe, 0xaf, 0x9d, 0x5c, 0xf4,
	0x80, 0xa8, 0x70, 0xb8, 0xc3, 0xa2, 0x0e, 0x67, 0x51, 0x0c, 0x76, 0x95, 0xa6, 0xcc, 0x20, 0x83,
	0x24, 0x4e, 0x63, 0x57, 0x83, 0x0a, 0x06, 0x8f, 0x4a, 0xb3, 0x20, 0x25, 0xe7, 0x02, 0x22, 0x8e,
	0x9b, 0xa7, 0x34, 0xd3, 0xec, 0xa0, 0x14, 0x40, 0x7a, 0x99, 0x66, 0xc1, 0x59, 0xcc, 0xcc, 0x74,
	0xb6, 0x42, 0x28, 0xcd, 0x5e, 0x17, 0x78, 0x31, 0x1f, 0xd8, 0xcf, 0xf0, 0x66, 0xdc, 0xf9, 0x8e,
	0x4a, 0x81, 0xff, 0x1f, 0x35, 0xf4, 0x8e, 0xf5, 0x14, 0xea, 0xc8, 0xd7, 0x53, 0x44, 0xc9, 0xe2,
	0x19, 0x5b, 0x43, 0xf3, 0xa7, 0x54, 0xc8, 0xc9, 0x4a, 0xa6, 0x04, 0xbd, 0xef, 0xa1, 0x59, 0x09,
	0x74, 0x9d, 0x24, 0x34, 0x37, 0x1e, 0xb4, 0xaf, 0x98, 0xac, 0x0d, 0xbf, 0xbb, 0x86, 0x6f, 0x5b,
	0x75, 0x76, 0xda, 0xaa, 0xde, 0x6d, 0xd4, 0x08, 0x45, 0xe8, 0xbc, 0x48, 0x00, 0xb4, 0x3e, 0x41,
	0x33, 0x30, 0x0b, 0xc8, 0x27, 0x63, 0x23, 0x00, 0x70, 0x90, 0x11, 0x4d, 0x26, 0xaa, 0x19, 0x03,
	0xf9, 0x3f, 0x76, 0x6e, 0x58, 0x2c, 0xe1, 0xa1, 0xd9, 0x67, 0xe0, 0x27, 0x5c, 0x8c, 0xf4, 0x43,
	0x67, 0x30, 0x27, 0x99, 0x28, 0x41, 0x5b, 0xe1, 0xfa, 0x05, 0x6e, 0xf0, 0xab, 0x1a, 0x7a, 0xbb,
	0x9a, 0xfd, 0x0f, 0x72, 0x2a, 0xd5, 0xa1, 0xe0, 0x03, 0x41, 0xa5, 0x84, 0x80, 0xf2, 0x13, 0x00,
	0x60, 0xac, 0x5d, 0x91, 0xcc, 0x6b, 0x74, 0x3f, 0x02, 0x7f, 0x67, 0x5c, 0xa4, 0x24, 0x09, 0x32,
	0xae, 0x53, 0xa2, 0xba, 0xc5, 0x5a, 0x32, 0xa2, 0x43, 0x2d, 0x81, 0x93, 0x3d, 0xe6, 0x2c, 0x97,
	0x25, 0xb3, 0x61, 0x31, 0x9b, 0x5a, 0x52, 0x10, 0xdf, 0x47, 0x2b, 0xb1, 0x0c, 0x28, 0x6c, 0x2f,
	0xd0, 0xeb, 0x38, 0x8d, 0x9c, 0xa5, 0x58, 0xea, 0x1b, 0xa2, 0x15, 0xf5, 0x3f, 0x45, 0x6b, 0xd6,
	0x13, 0x18, 0x72, 0x41, 0x3f, 0xa3, 0x24, 0xa2, 0xe2, 0x98, 0x13, 0x11, 0xc1, 0xd3, 0xe6, 0x3d,
	0x2e, 0x8a, 0x44, 0xf3, 0xfe, 0xdd, 0x6a, 0x5f, 0x44, 0x32, 0x55, 0xa3, 0xff, 0x63, 0x3b, 0x41,
	0xfc, 0xa2, 0x4b, 0xd8, 0xc9, 0x2e, 0x35, 0xf9, 0x26, 0x8f, 0xe8, 0x54, 0x36, 0x34, 0x0f, 0x28,
	0xe4, 0x42, 0xef, 0x21, 0x14, 0x72, 0xa6, 0x04, 0x4f, 0x12, 0x2a, 0x1c, 0x13, 0x5b, 0xb8, 0xff,
	0xb3, 0xa9, 0xc9, 0x5f, 0x66, 0xd1, 0xff, 0xd1, 0xe4, 0xe0, 0x02, 0x82, 0xb0, 0x93, 0x98, 0x0d,
	0xdc, 0x64, 0xab, 0x00, 0xfd, 0x2e, 0x5a, 0xb5, 0x82, 0x16, 0x49, 0x92, 0x57, 0x5c, 0xd1, 0xe7,
	0x24, 0x4e, 0x68, 0x04, 0xaf, 0x9e, 0xa0, 0x44, 0x4e, 0xdc, 0x93, 0x02, 0xd3, 0xe9, 0xf1, 0x64,
	0xa9, 0xaf, 0x11, 0xff, 0x17, 0x75, 0xb7, 0xd0, 0x52, 0xb4, 0x07, 0x91, 0xd2, 0x24, 0xd4, 0x24,
	0x75, 0x66, 0xd3, 0x88, 0xdd, 0x5f, 0xab, 0x5f, 0xd0, 0x5f, 0x7b, 0x80, 0x16, 0x4f, 0xb9, 0xa2,
	0xd3, 0x41, 0x7b, 0x01, 0x60, 0x1d, 0xac, 0xef, 0xa3, 0x05, 0xf0, 0xea, 0x40, 0x2a, 0xe1, 0xd4,
	0x80, 0xda, 0xd7, 0x7b, 0x4a, 0x40, 0x94, 0x89, 0xa8, 0x22, 0x71, 0x22, 0x35, 0x67, 0xd6, 0x2e,
	0x62, 0x0b, 0x01, 0xd0, 0xde, 0x47, 0x2b, 0x5c, 0x0d, 0xa9, 0x08, 0x40, 0x2f, 0xcd, 0x9c, 0xb3,
	0x98, 0x4b, 0x5a, 0x76, 0x44, 0x49, 0x0a, 0xdc, 0xc7, 0xda, 0x1d, 0x47, 0x54, 0x06, 0x8c, 0x07,
	0xa0, 0x89, 0x93, 0x4e, 0x36, 0x63, 0xf9, 0x86, 0xca, 0x17, 0x1c, 0xf6, 0xef, 0xff, 0xb5, 0xdb,
	0x33, 0xe6, 0x8a, 0x1e, 0x12, 0x29, 0xaf, 0xb0, 0x88, 0xb3, 0xe5, 0xfa, 0x37, 0x6e, 0xb9, 0xf1,
	0x2d, 0xb6, 0x3c, 0x73, 0xf1, 0x96, 0xfd, 0x17, 0xe8, 0xa6, 0xab, 0x5a, 0x71, 0xfc, 0x97, 0x2b,
	0x57, 0x39, 0x46, 0x7d, 0xda, 0x31, 0xfc, 0x1f, 0x4d, 0x9d, 0x3e, 0x55, 0x79, 0xe6, 0x3d, 0x46,
	0x38, 0xe3, 0x0a, 0x92, 0x3d, 0x92, 0x04, 0xb1, 0x94, 0x39, 0x2d, 0xcb, 0xa4, 0x6b, 0x63, 0x7c,
	0x5f, 0xc3, 0xfe, 0x3f, 0xd5, 0xd0, 0x43, 0x37, 0x7f, 0xfd, 0x8c, 0x48, 0x05, 0xb9, 0x0c, 0x15,
	0xa6, 0x94, 0x3d, 0xe2, 0x1d, 0x53, 0xf3, 0xbd, 0x8f, 0x56, 0x58, 0x9e, 0x06, 0xc3, 0x58, 0xc9,
	0x60, 0x10, 0x9f, 0x52, 0xd7, 0x57, 0x97, 0x58, 0x9e, 0xee, 0xc5, 0x4a, 0xee, 0x82, 0x04, 0xe2,
	0x4c, 0xa4, 0x47, 0x17, 0x4c, 0xe7, 0x45, 0x32, 0x12, 0x43, 0xb4, 0x27, 0x55, 0xe4, 0x84, 0x32,
	0x37, 0xc9, 0x29, 0x26, 0x3d, 0x02, 0x89, 0x35, 0xa9, 0x61, 0xce, 0x4c, 0x4f, 0xaa, 0x89, 0xfe,
	0xdf, 0xd6, 0xed, 0x58, 0xdd, 0xa3, 0xe2, 0x94, 0x8a, 0xe2, 0xb2, 0xc3, 0xab, 0xb4, 0x8b, 0x9a,
	0x70, 0x27, 0xab, 0xe2, 0x0f, 0xde, 0x9e, 0x87, 0xed, 0xcb, 0x47, 0xb4, 0xab, 0x9f, 0x5d, 0x24,
	0xc6, 0xbf, 0x5b, 0xbf, 0xae, 0x21, 0x64, 0xcd, 0xfb, 0x2e, 0x42, 0x24, 0xd4, 0xaf, 0x7e, 0x19,
	0xaa, 0xc7, 0x6f, 0x75, 0x81, 0x9b, 0x9a, 0x4c, 0x2f, 0xce, 0x93, 0x89, 0xa2, 0x0d, 0xd0, 0xcf,
	0x93, 0x8a, 0xc0, 0xe8, 0xd9, 0x74, 0x1c, 0x79, 0x41, 0xcf, 0x80, 0x00, 0x26, 0x3b, 0x8b, 0x99,
	0x74, 0x8b, 0x36, 0x96, 0xa7, 0xaf, 0x63, 0x26, 0x4d, 0x13, 0x89, 0x9d, 0x04, 0xe1, 0x50, 0x7f,
	0x6a, 0xb0, 0xf3, 0x6f, 0xad, 0x7d, 0x47, 0xe3, 0xfe, 0x6b, 0x27, 0x18, 0x66, 0xc5, 0x26, 0x36,
	0x9d, 0x50, 0xfd, 0x44, 0xf7, 0x22, 0x76, 0x3b, 0x9d, 0xf1, 0x37, 0x9a, 0xd3, 0x8d, 0x60, 0xb7,
	0xb3, 0x61, 0x2c, 0xf4, 0x82, 0xab, 0xb8, 0x3f, 0xfa, 0xe2, 0xb0, 0x4b, 0xcf, 0x88, 0x88, 0x68,
	0x54, 0x84, 0xf0, 0x0f, 0x6c, 0x2f, 0xd7, 0x55, 0x4e, 0x1c, 0x9e, 0xe4, 0x19, 0x78, 0x39, 0x54,
	0x37, 0x6e, 0x95, 0x0f, 0x88, 0xff, 0x57, 0xee, 0xb7, 0x80, 0x21, 0x3f, 0xd3, 0xdf, 0x79, 0xda,
	0x08, 0x1f, 0x83, 0x63, 0x9c, 0x92, 0x24, 0x8e, 0x02, 0x99, 0x70, 0x5d, 0xee, 0x5b, 0xad, 0x0e,
	0x90, 0xbe, 0x02, 0x61, 0x0f, 0x64, 0xda, 0x41, 0xcc, 0x7b, 0x3b, 0xdd, 0x1a, 0x6d, 0x16, 0x12,
	0xdd, 0x1d, 0x85, 0x3c, 0x88, 0xb2, 0x1c, 0xee, 0x6a, 0x19, 0xae, 0xc7, 0xd7, 0x15, 0x04, 0x3d,
	0x8d, 0xbb, 0x9f, 0x58, 0xb6, 0x88, 0x18, 0x37, 0x9d, 0xe3, 0xc9, 0x0f, 0x41, 0x3a, 0x18, 0x7f,
	0x64, 0xef, 0x7b, 0x33, 0x4d, 0xf9, 0x36, 0x65, 0x31, 0x8d, 0x74, 0xb9, 0x95, 0xa6, 0x7c, 0x7f,
	0xf2, 0x79, 0x29, 0x40, 0xbf, 0x83, 0xee, 0xd8, 0x29, 0xa0, 0x38, 0xb1, 0x12, 0xd1, 0x8b, 0x72,
	0xd0, 0xc5, 0x0b, 0x72, 0x50, 0xff, 0x13, 0xdb, 0xe5, 0x75, 0x1e, 0x69, 0x27, 0x62, 0x77, 0xd1,
	0x9c, 0xd5, 0xea, 0x58, 0x1c, 0x67, 0x1f, 0x1a, 0xf3, 0x5f, 0xd8, 0xd6, 0x2f, 0xab, 0x63, 0x18,
	0xa3, 0x8b, 0x51, 0xe3, 0xca, 0x8d, 0x72, 0x8c, 0xc1, 0x4c, 0xaa, 0x44, 0xd4, 0xd0, 0x69, 0xbd,
	0x19, 0xc8, 0xff, 0xd8, 0xde, 0xd0, 0x6e, 0xc2, 0xcf, 0x0e, 0x05, 0xcf, 0x8e, 0x72, 0xc1, 0x3e,
	0xef, 0xf7, 0xaf, 0x2e, 0x4d, 0xfd, 0x5f, 0xd6, 0xec, 0x64, 0xa2, 0x0b, 0x69, 0xeb, 0x16, 0x01,
	0xef, 0x29, 0x7b, 0x8b, 0xb2, 0xca, 0xb6, 0x6b, 0xd3, 0xd9, 0xf6, 0xb8, 0x53, 0x5d, 0x9f, 0xee,
	0x54, 0xaf, 0xa3, 0x85, 0x71, 0xef, 0xd2, 0x3e, 0xf1, 0x31, 0x0a, 0x0c, 0x16, 0x87, 0xd3, 0xdd,
	0xcd, 0x31, 0xea, 0x7f, 0xe0, 0xf4, 0x5d, 0xa9, 0xa4, 0x6a, 0x2f, 0xd7, 0xb6, 0x10, 0xf0, 0xdb,
	0x49, 0xfd, 0x0c, 0xe4, 0x3f, 0xb5, 0x43, 0xf4, 0x2e, 0x49, 0xe9, 0x51, 0xac, 0x4c, 0x4b, 0x3d,
	0xca, 0xd3, 0x74, 0xe4, 0x6e, 0x42, 0x43, 0xfe, 0x33, 0xb7, 0xac, 0xd7, 0xe9, 0x17, 0x1c, 0xe6,
	0xd5, 0xa3, 0x3e, 0xb6, 0x53, 0xf1, 0x9e, 0xe2, 0x59, 0x2f, 0xa3, 0xa1, 0x82, 0x12, 0x4b, 0x57,
	0x9d, 0xdf, 0x7a, 0xe8, 0x76, 0x2c, 0x43, 0xce, 0x18, 0x0d, 0xd5, 0x11, 0xff, 0x8c, 0x1f, 0x1f,
	0x8f, 0xae, 0x1c, 0xfa, 0x91, 0x9d, 0xd4, 0xbc, 0x26, 0x22, 0xcd, 0xb3, 0x3d, 0x22, 0x77, 0x58,
	0x44, 0xa3, 0x2b, 0xc7, 0x6d, 0xd8, 0x77, 0xc5, 0x3c, 0x30, 0xfb, 0xac, 0xcf, 0xaf, 0x1c, 0xf3,
	0xc6, 0x6d, 0xb5, 0x94, 0x31, 0xba, 0x4b, 0x4f, 0x29, 0x49, 0x36, 0x93, 0x04, 0x6a, 0x56, 0x53,
	0x15, 0xcb, 0x40, 0xc5, 0x49, 0x12, 0xc8, 0x61, 0xae, 0x22, 0x7e, 0xe6, 0x3e, 0x54, 0x37, 0x0a,
	0xca, 0x51, 0x9c, 0x24, 0xbd, 0x82, 0xf0, 0xfe, 0x7f, 0x37, 0xd1, 0xed, 0x9d, 0x71, 0x90, 0x7b,
	0x29, 0xa9, 0x38, 0x28, 0xbe, 0x44, 0x7b, 0x1e, 0x5a, 0xe9, 0xf4, 0x82, 0x97, 0x07, 0xe3, 0x8f,
	0xc4, 0xb8, 0xe6, 0x61, 0xb4, 0x64, 0x30, 0xf3, 0x59, 0x17, 0xd7, 0xbd, 0x6b, 0xa8, 0x69, 0x10,
	0xfd, 0xe1, 0x16, 0x37, 0xbc, 0xeb, 0x68, 0xd9, 0x00, 0xc5, 0xa7, 0x59, 0x3c, 0x53, 0x41, 0xc5,
	0xc7, 0x4e, 0x3c, 0x5b, 0x4d, 0x5e, 0x7e, 0xff, 0xc4, 0x73, 0x15, 0xad, 0xf8, 0xc6, 0x88, 0xe7,
	0xab, 0xf5, 0xcc, 0x97, 0x42, 0xbc, 0x50, 0x0d, 0x2c, 0x9d, 0x10, 0x2f, 0x7a, 0x37, 0xd0, 0xb5,
	0x42, 0xab, 0xd2, 0xcd, 0x30, 0xaa, 0x14, 0xd3, 0x1f, 0xc1, 0xf0, 0x92, 0xb7, 0x82, 0x90, 0x01,
	0x9e, 0x93, 0x88, 0xe2, 0xe5, 0x6a, 0x6e, 0xf3, 0xb1, 0x07, 0xaf, 0x78, 0xb7, 0x91, 0x67, 0x10,
	0xfb, 0xd3, 0x08, 0xbe, 0xe6, 0xdd, 0x45, 0xab, 0xd3, 0xb8, 0xf9, 0x64, 0x82, 0x71, 0xb5, 0xfa,
	0xf8, 0x6b, 0x06, 0xbe, 0x6e, 0xa9, 0x59, 0x7c, 0xa3, 0xc0, 0x5e, 0x45, 0x1c, 0xf7, 0xfa, 0xf1,
	0x8d, 0x6a, 0x4d, 0xdb, 0xdf, 0xf1, 0xcd, 0x4a, 0x3b, 0x93, 0x8c, 0xe0, 0x5b, 0xd5, 0xf0, 0x71,
	0x2b, 0x1b, 0xdf, 0xae, 0xd6, 0x29, 0xfb, 0xc3, 0xf8, 0x6d, 0xef, 0x16, 0xba, 0x6e, 0x30, 0xab,
	0x6d, 0x8c, 0x57, 0xbd, 0xf7, 0xd0, 0xba, 0x81, 0x2f, 0xef, 0xdc, 0xe2, 0x3b, 0xb6, 0x3e, 0x55,
	0x5b, 0x0d, 0xb7, 0xaa, 0x49, 0xad, 0x9e, 0x15, 0x7e, 0xc7, 0xbb, 0x83, 0x6e, 0x19, 0xd8, 0x4c,
	0x00, 0x69, 0xab, 0x11, 0xdd, 0xf5, 0xde, 0x41, 0x6f, 0x17, 0x76, 0x99, 0xbc, 0x93, 0xf8, 0x5e,
	0x75, 0xd6, 0x45, 0xf7, 0x08, 0xaf, 0x79, 0x2d, 0x74, 0xbb, 0xd8, 0xf1, 0x44, 0x4b, 0x06, 0xdf,
	0xaf, 0x64, 0x93, 0x3d, 0x0f, 0xbc, 0x5e, 0xc9, 0x26, 0xdb, 0x18, 0xf8, 0x41, 0x75, 0x72, 0xd3,
	0x0d, 0x06, 0xec, 0x57, 0x1a, 0x4e, 0x5d, 0x7d, 0xfc, 0x6e, 0x25, 0x9c, 0x2a, 0xc8, 0xf1, 0x7b,
	0x96, 0xae, 0x13, 0xf5, 0x30, 0xfe, 0x8e, 0xb7, 0x8a, 0x6e, 0x1a, 0x99, 0x1b, 0x15, 0xf0, 0x43,
	0xef, 0x26, 0xc2, 0xa5, 0x1f, 0x95, 0xf7, 0x1e, 0x7f, 0xb7, 0x3a, 0xc2, 0xb2, 0xe8, 0xc3, 0x8f,
	0x26, 0xb0, 0x97, 0x59, 0x84, 0x1f, 0x57, 0xf3, 0xba, 0x25, 0x14, 0x7e, 0x62, 0x3b, 0x56, 0x51,
	0x07, 0xe1, 0xb6, 0x75, 0x7d, 0x8b, 0x4a, 0x00, 0xff, 0x56, 0xa5, 0x80, 0x35, 0xfc, 0x83, 0x89,
	0xe1, 0x90, 0x48, 0xe3, 0xa7, 0xde, 0x3d, 0x74, 0xa7, 0xf4, 0xea, 0xa9, 0x78, 0x83, 0x37, 0xbc,
	0x87, 0xc8, 0xaf, 0x9c, 0xfe, 0xb2, 0xcc, 0x19, 0xff, 0x76, 0x65, 0xa8, 0xc9, 0xd4, 0x12, 0x3f,
	0xab, 0xb4, 0xa9, 0x52, 0x25, 0xfc, 0xa1, 0x15, 0x19, 0x8a, 0x6c, 0x08, 0x7f, 0x54, 0x79, 0x4b,
	0x91, 0x8b, 0xe0, 0xef, 0x55, 0x83, 0xab, 0x7c, 0x03, 0x7f, 0xbf, 0x72, 0xc7, 0x89, 0x6c, 0x02,
	0x7f, 0x5c, 0x69, 0x32, 0x99, 0x23, 0xe0, 0x4f, 0xaa, 0x35, 0xcb, 0x1c, 0x00, 0xff, 0xa0, 0x9a,
	0x6a, 0xe2, 0x1d, 0xc7, 0x3f, 0xb4, 0x6d, 0x33, 0xd5, 0x5a, 0xc7, 0xbf, 0xe3, 0xad, 0xa1, 0x56,
	0x71, 0x85, 0x2e, 0x78, 0xc5, 0xf1, 0xef, 0x5e, 0x36, 0x5c, 0x77, 0xcd, 0xf1, 0xef, 0x59, 0xf7,
	0xbc, 0xec, 0xf2, 0xe2, 0x1f, 0x59, 0x0e, 0x51, 0xe4, 0xab, 0x78, 0xd3, 0x7b, 0x1b, 0xdd, 0x30,
	0x98, 0xd3, 0x36, 0xc1, 0x5b, 0x95, 0x02, 0x17, 0xb5, 0x1b, 0x70, 0x67, 0xab, 0xf5, 0xd5, 0xd7,
	0x6b, 0xb5, 0x7f, 0xfc, 0x7a, 0xad, 0xf6, 0x6f, 0x5f, 0xaf, 0xd5, 0x7e, 0xf1, 0xef, 0x6b, 0x6f,
	0xed, 0xd5, 0xbe, 0x6c, 0xa4, 0x72, 0xf0, 0xa7, 0xb5, 0xb7, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xd5, 0x67, 0x04, 0x15, 0xc7, 0x24, 0x00, 0x00,
}
