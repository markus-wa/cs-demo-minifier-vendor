// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: engine_gcmessages.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CEngineGotvSyncPacket struct {
	MatchId          uint64  `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id"`
	InstanceId       uint32  `protobuf:"varint,2,opt,name=instance_id,json=instanceId" json:"instance_id"`
	Signupfragment   uint32  `protobuf:"varint,3,opt,name=signupfragment" json:"signupfragment"`
	Currentfragment  uint32  `protobuf:"varint,4,opt,name=currentfragment" json:"currentfragment"`
	Tickrate         float32 `protobuf:"fixed32,5,opt,name=tickrate" json:"tickrate"`
	Tick             uint32  `protobuf:"varint,6,opt,name=tick" json:"tick"`
	Rtdelay          float32 `protobuf:"fixed32,8,opt,name=rtdelay" json:"rtdelay"`
	Rcvage           float32 `protobuf:"fixed32,9,opt,name=rcvage" json:"rcvage"`
	KeyframeInterval float32 `protobuf:"fixed32,10,opt,name=keyframe_interval,json=keyframeInterval" json:"keyframe_interval"`
}

func (m *CEngineGotvSyncPacket) Reset()         { *m = CEngineGotvSyncPacket{} }
func (m *CEngineGotvSyncPacket) String() string { return proto.CompactTextString(m) }
func (*CEngineGotvSyncPacket) ProtoMessage()    {}
func (*CEngineGotvSyncPacket) Descriptor() ([]byte, []int) {
	return fileDescriptorEngineGcmessages, []int{0}
}

func (m *CEngineGotvSyncPacket) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CEngineGotvSyncPacket) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *CEngineGotvSyncPacket) GetSignupfragment() uint32 {
	if m != nil {
		return m.Signupfragment
	}
	return 0
}

func (m *CEngineGotvSyncPacket) GetCurrentfragment() uint32 {
	if m != nil {
		return m.Currentfragment
	}
	return 0
}

func (m *CEngineGotvSyncPacket) GetTickrate() float32 {
	if m != nil {
		return m.Tickrate
	}
	return 0
}

func (m *CEngineGotvSyncPacket) GetTick() uint32 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *CEngineGotvSyncPacket) GetRtdelay() float32 {
	if m != nil {
		return m.Rtdelay
	}
	return 0
}

func (m *CEngineGotvSyncPacket) GetRcvage() float32 {
	if m != nil {
		return m.Rcvage
	}
	return 0
}

func (m *CEngineGotvSyncPacket) GetKeyframeInterval() float32 {
	if m != nil {
		return m.KeyframeInterval
	}
	return 0
}

func init() {
	proto.RegisterType((*CEngineGotvSyncPacket)(nil), "CEngineGotvSyncPacket")
}
func (m *CEngineGotvSyncPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEngineGotvSyncPacket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintEngineGcmessages(dAtA, i, uint64(m.MatchId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintEngineGcmessages(dAtA, i, uint64(m.InstanceId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintEngineGcmessages(dAtA, i, uint64(m.Signupfragment))
	dAtA[i] = 0x20
	i++
	i = encodeVarintEngineGcmessages(dAtA, i, uint64(m.Currentfragment))
	dAtA[i] = 0x2d
	i++
	i = encodeFixed32EngineGcmessages(dAtA, i, uint32(math.Float32bits(float32(m.Tickrate))))
	dAtA[i] = 0x30
	i++
	i = encodeVarintEngineGcmessages(dAtA, i, uint64(m.Tick))
	dAtA[i] = 0x45
	i++
	i = encodeFixed32EngineGcmessages(dAtA, i, uint32(math.Float32bits(float32(m.Rtdelay))))
	dAtA[i] = 0x4d
	i++
	i = encodeFixed32EngineGcmessages(dAtA, i, uint32(math.Float32bits(float32(m.Rcvage))))
	dAtA[i] = 0x55
	i++
	i = encodeFixed32EngineGcmessages(dAtA, i, uint32(math.Float32bits(float32(m.KeyframeInterval))))
	return i, nil
}

func encodeFixed64EngineGcmessages(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32EngineGcmessages(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEngineGcmessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CEngineGotvSyncPacket) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovEngineGcmessages(uint64(m.MatchId))
	n += 1 + sovEngineGcmessages(uint64(m.InstanceId))
	n += 1 + sovEngineGcmessages(uint64(m.Signupfragment))
	n += 1 + sovEngineGcmessages(uint64(m.Currentfragment))
	n += 5
	n += 1 + sovEngineGcmessages(uint64(m.Tick))
	n += 5
	n += 5
	n += 5
	return n
}

func sovEngineGcmessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEngineGcmessages(x uint64) (n int) {
	return sovEngineGcmessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CEngineGotvSyncPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineGcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEngineGotvSyncPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEngineGotvSyncPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineGcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			m.InstanceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineGcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signupfragment", wireType)
			}
			m.Signupfragment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineGcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Signupfragment |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currentfragment", wireType)
			}
			m.Currentfragment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineGcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currentfragment |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tickrate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Tickrate = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineGcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtdelay", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rtdelay = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rcvage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rcvage = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyframeInterval", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.KeyframeInterval = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEngineGcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineGcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEngineGcmessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEngineGcmessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngineGcmessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngineGcmessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEngineGcmessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEngineGcmessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEngineGcmessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEngineGcmessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEngineGcmessages   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("engine_gcmessages.proto", fileDescriptorEngineGcmessages) }

var fileDescriptorEngineGcmessages = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8c, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0x47, 0x3b, 0x6d, 0xbe, 0xb6, 0xdf, 0x15, 0xff, 0x0d, 0x88, 0xb3, 0x90, 0x34, 0x08, 0x42,
	0x16, 0x52, 0xf0, 0x15, 0x2a, 0x22, 0xd9, 0x89, 0xee, 0xdc, 0x84, 0x61, 0x72, 0x3b, 0x0e, 0x69,
	0x26, 0x65, 0x66, 0x1a, 0xc8, 0xce, 0x47, 0xf0, 0xb1, 0xba, 0xf4, 0x09, 0x44, 0xe2, 0xce, 0xa7,
	0x90, 0x86, 0xa4, 0x0c, 0xdd, 0x5d, 0xce, 0x39, 0xf7, 0x07, 0x97, 0xa8, 0xa5, 0xd2, 0x98, 0x4a,
	0x51, 0xa0, 0xb5, 0x5c, 0xa2, 0x9d, 0xaf, 0x4d, 0xe9, 0xca, 0xeb, 0xdf, 0x21, 0x5c, 0xdc, 0x3f,
	0xb4, 0xf2, 0xb1, 0x74, 0xd5, 0x4b, 0xad, 0xc5, 0x13, 0x17, 0x39, 0x3a, 0x3a, 0x83, 0x69, 0xc1,
	0x9d, 0x78, 0x4b, 0x55, 0xc6, 0x48, 0x44, 0xe2, 0x60, 0x11, 0x6c, 0xbf, 0x66, 0x83, 0xe7, 0x49,
	0x4b, 0x93, 0x8c, 0xde, 0xc0, 0x91, 0xd2, 0xd6, 0x71, 0x2d, 0x70, 0xd7, 0x0c, 0x23, 0x12, 0x1f,
	0x77, 0x0d, 0xf4, 0x22, 0xc9, 0xe8, 0x2d, 0x9c, 0x58, 0x25, 0xf5, 0x66, 0xbd, 0x34, 0x5c, 0x16,
	0xa8, 0x1d, 0x1b, 0x79, 0xe5, 0x81, 0xa3, 0x73, 0x38, 0x15, 0x1b, 0x63, 0x50, 0xbb, 0x7d, 0x1e,
	0x78, 0xf9, 0xa1, 0xa4, 0x11, 0x4c, 0x9d, 0x12, 0xb9, 0xe1, 0x0e, 0xd9, 0xbf, 0x88, 0xc4, 0xc3,
	0x2e, 0xdc, 0x53, 0xca, 0x20, 0xd8, 0xdd, 0x6c, 0xec, 0xcd, 0xb4, 0x84, 0x86, 0x30, 0x31, 0x2e,
	0xc3, 0x15, 0xaf, 0xd9, 0xd4, 0x7b, 0xed, 0x21, 0xbd, 0x82, 0xb1, 0x11, 0x15, 0x97, 0xc8, 0xfe,
	0x7b, 0xba, 0x63, 0xf4, 0x0e, 0xce, 0x73, 0xac, 0x97, 0x86, 0x17, 0x98, 0x2a, 0xed, 0xd0, 0x54,
	0x7c, 0xc5, 0xc0, 0x0b, 0xcf, 0x7a, 0x9d, 0x74, 0x76, 0xc1, 0xb6, 0x4d, 0x48, 0x3e, 0x9b, 0x90,
	0x7c, 0x37, 0x21, 0xf9, 0xf8, 0x09, 0x07, 0xaf, 0xa3, 0xc2, 0xca, 0x77, 0x32, 0xf8, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x06, 0x06, 0x1a, 0x2d, 0xa0, 0x01, 0x00, 0x00,
}
